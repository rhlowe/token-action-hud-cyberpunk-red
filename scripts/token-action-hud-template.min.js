const e={ID:"token-action-hud-cyberpunk-red"},t={ID:"token-action-hud-core"},s="1.5",n={item:"tokenActionHud.template.item",utility:"tokenActionHud.utility"},i={character:{id:"character",name:"tokenActionHud.template.character",type:"system"},stats:{id:"stats",name:"tokenActionHud.template.stats",type:"system"},skills:{id:"skills",name:"tokenActionHud.template.skills",type:"system"},role:{id:"role",name:"tokenActionHud.template.role",type:"system"},gear:{id:"gear",name:"tokenActionHud.template.gear",type:"system"},cyber:{id:"cyber",name:"tokenActionHud.template.cyber",type:"system"},effects:{id:"effects",name:"tokenActionHud.template.effects",type:"system"}},o={activeEffects:{groupId:"activeEffects"},ammo:{groupId:"ammo"},armor:{groupId:"armor"},clothing:{groupId:"clothing"},criticalInjuries:{groupId:"criticalInjuries"},cyberdecks:{groupId:"cyberdecks"},cyberware:{groupId:"cyberware"},drugs:{groupId:"drugs"},gear:{groupId:"gear"},upgrades:{groupId:"upgrades"},netArchitecture:{groupId:"netArchitecture"},programs:{groupId:"programs"},roles:{groupId:"roles"},skills:{groupId:"skills"},vehicles:{groupId:"vehicles"},weapons:{groupId:"weapons"}},a=["character","mook"];let r=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{r=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const[s,n]=t.split("|");if(["item"].includes(s)&&this.isRenderItem())return this.doRenderItem(this.actor,n);const i=["character"];if(this.actor)return void await this.#e(e,this.actor,this.token,s,n);const o=canvas.tokens.controlled.filter((e=>i.includes(e.actor?.type)));for(const t of o){const i=t.actor;await this.#e(e,i,t,s,n)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#e(e,t,s,n,i){switch(n){case"item":this.#t(e,t,i);break;case"utility":this.#s(s,i)}}#t(e,t,s){t.items.get(s).toChat(e)}async#s(e,t){if("endTurn"===t)game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{c=class Utils{static getSetting(s,n=null){let i=n??null;try{i=game.settings.get(e.ID,s)}catch{t.api.Logger.debug(`Setting '${s}' not found`)}return i}static async setSetting(s,n){try{n=await game.settings.set(e.ID,s,n),t.api.Logger.debug(`Setting '${s}' set to '${n}'`)}catch{t.api.Logger.debug(`Setting '${s}' not found`)}}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{l=class ActionHandler extends e.api.ActionHandler{async buildSystemActions(t){if(this.actors=this.actor?[this.actor]:this.#n(),this.tokens=this.token?[this.token]:this.#i(),this.actorType=this.actor?.type,console.debug("*** buildSystemActions",t),this.displayUnequipped=c.getSetting("displayUnequipped"),this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}a.includes(this.actorType)?this.#o():this.actor||this.#a()}#o(){this.#r()}#a(){}async#r(){if(console.debug("*** #buildInventory",this.items),0===this.items.size)return;const t="item",s=new Map;for(const[e,t]of this.items){const n=t.type;if(t.equipped||this.displayUnequipped){const i=s.get(n)??new Map;i.set(e,t),s.set(n,i)}}for(const[i,a]of s){const s=o[i]?.groupId;if(!s)continue;const r={id:s,type:"system"},c=[...a].map((([s,i])=>{const o=s,a=i.name,r=e.api.Utils.i18n(n[t]),c=`${r?`${r}: `:""}${a}`,l=[t,o].join(this.delimiter);return{id:o,name:a,listName:c,encodedValue:l}}));this.addActions(c,r)}}async#n(){const e=canvas.tokens.controlled.filter((e=>e.actor)).map((e=>e.actor));return e.every((e=>a.includes(e.type)))?e:[]}async#i(){const e=canvas.tokens.controlled;return e.filter((e=>e.actor)).map((e=>e.actor)).every((e=>a.includes(e.type)))?e:[]}}}));let d=null;function register(t){game.settings.register(e.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=i;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const s=Object.values(t);d={layout:[{nestId:"character",id:"character",name:e.api.Utils.i18n("tokenActionHud.character"),groups:[{...t.character,nestId:"character_character"}]},{nestId:"stats",id:"stats",name:e.api.Utils.i18n("tokenActionHud.stats"),groups:[{...t.stats,nestId:"stats_stats"}]},{nestId:"skills",id:"skills",name:e.api.Utils.i18n("tokenActionHud.skills"),groups:[{...t.skills,nestId:"skills_skills"}]},{nestId:"role",id:"roley",name:e.api.Utils.i18n("tokenActionHud.role"),groups:[{...t.role,nestId:"role_role"}]},{nestId:"gear",id:"geary",name:e.api.Utils.i18n("tokenActionHud.gear"),groups:[{...t.gear,nestId:"gear_gear"}]},{nestId:"cyber",id:"cyber",name:e.api.Utils.i18n("tokenActionHud.cyber"),groups:[{...t.cyber,nestId:"cyber_cyber"}]},{nestId:"effects",id:"effects",name:e.api.Utils.i18n("tokenActionHud.effects"),groups:[{...t.effects,nestId:"effects_effects"}]}],groups:s}}));let u=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{u=class SystemManager extends t.api.SystemManager{getActionHandler(){return new l}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(e){let t;return t=new r,t}async registerDefaults(){return d}registerSettings(e){register(e)}registerStyles(){return{template:{class:"tah-style-template-style",file:"tah-template-style",moduleId:e.ID,name:"Template Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.5",SystemManager:u},Hooks.call("tokenActionHudSystemReady",t)}));export{n as ACTION_TYPE,a as ACTOR_TYPES,l as ActionHandler,t as CORE_MODULE,d as DEFAULTS,i as GROUP,o as ITEM_TYPE,e as MODULE,s as REQUIRED_CORE_MODULE_VERSION,r as RollHandler,u as SystemManager,c as Utils,register};
//# sourceMappingURL=token-action-hud-template.min.js.map
