const e={ID:"token-action-hud-cyberpunk-red"},t={ID:"token-action-hud-core"},s="1.5",i={item:"tokenActionHud.template.item",utility:"tokenActionHud.utility"},n={character:{id:"character",name:"tokenActionHud.template.character",type:"system"},stats:{id:"stats",name:"tokenActionHud.template.stats",type:"system"},skills:{id:"skills",name:"tokenActionHud.template.skills",type:"system"},role:{id:"role",name:"tokenActionHud.template.role",type:"system"},gear:{id:"gear",name:"tokenActionHud.template.gear",type:"system"},cyber:{id:"cyber",name:"tokenActionHud.template.cyber",type:"system"},effects:{id:"effects",name:"tokenActionHud.template.effects",type:"system"}},a={activeEffects:{groupId:"activeEffects"},ammo:{groupId:"ammo"},armor:{groupId:"armor"},clothing:{groupId:"clothing"},criticalInjuries:{groupId:"criticalInjuries"},cyberdecks:{groupId:"cyberdecks"},cyberware:{groupId:"cyberware"},drugs:{groupId:"drugs"},gear:{groupId:"gear"},upgrades:{groupId:"upgrades"},netArchitecture:{groupId:"netArchitecture"},programs:{groupId:"programs"},roles:{groupId:"roles"},skills:{groupId:"skills"},vehicles:{groupId:"vehicles"},weapons:{groupId:"weapons"}};let o=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{o=class Utils{static getSetting(s,i=null){let n=i??null;try{n=game.settings.get(e.ID,s)}catch{t.api.Logger.debug(`Setting '${s}' not found`)}return n}static async setSetting(s,i){try{i=await game.settings.set(e.ID,s,i),t.api.Logger.debug(`Setting '${s}' set to '${i}'`)}catch{t.api.Logger.debug(`Setting '${s}' not found`)}}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{r=class ActionHandler extends e.api.ActionHandler{a;async buildSystemActions(t){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=o.getSetting("displayUnequipped"),this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}"character"===this.actorType?this.#e():this.actor||this.#t()}#e(){this.#s()}#t(){}async#s(){if(0===this.items.size)return;const t="item",s=new Map;for(const[e,t]of this.items){const i=t.type;if(t.equipped||this.displayUnequipped){const n=s.get(i)??new Map;n.set(e,t),s.set(i,n)}}for(const[n,o]of s){const s=a[n]?.groupId;if(!s)continue;const r={id:s,type:"system"},c=[...o].map((([s,n])=>{const a=s,o=n.name,r=e.api.Utils.i18n(i[t]),c=`${r?`${r}: `:""}${o}`,l=[t,a].join(this.delimiter);return{id:a,name:o,listName:c,encodedValue:l}}));this.addActions(c,r)}}}}));let c=null;function register(t){game.settings.register(e.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=n;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const s=Object.values(t);c={layout:[{nestId:"character",id:"character",name:e.api.Utils.i18n("tokenActionHud.character"),groups:[{...t.character,nestId:"character_character"}]},{nestId:"stats",id:"stats",name:e.api.Utils.i18n("tokenActionHud.stats"),groups:[{...t.stats,nestId:"stats_stats"}]},{nestId:"skills",id:"skills",name:e.api.Utils.i18n("tokenActionHud.skills"),groups:[{...t.skills,nestId:"skills_skills"}]},{nestId:"role",id:"roley",name:e.api.Utils.i18n("tokenActionHud.role"),groups:[{...t.role,nestId:"role_role"}]},{nestId:"gear",id:"geary",name:e.api.Utils.i18n("tokenActionHud.gear"),groups:[{...t.gear,nestId:"gear_gear"}]},{nestId:"cyber",id:"cyber",name:e.api.Utils.i18n("tokenActionHud.cyber"),groups:[{...t.cyber,nestId:"cyber_cyber"}]},{nestId:"effects",id:"effects",name:e.api.Utils.i18n("tokenActionHud.effects"),groups:[{...t.effects,nestId:"effects_effects"}]}],groups:s}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{l=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const[s,i]=t.split("|");if(["item"].includes(s)&&this.isRenderItem())return this.doRenderItem(this.actor,i);const n=["character"];if(this.actor)return void await this.#i(e,this.actor,this.token,s,i);const a=canvas.tokens.controlled.filter((e=>n.includes(e.actor?.type)));for(const t of a){const n=t.actor;await this.#i(e,n,t,s,i)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#i(e,t,s,i,n){switch(i){case"item":this.#n(e,t,n);break;case"utility":this.#a(s,n)}}#n(e,t,s){t.items.get(s).toChat(e)}async#a(e,t){if("endTurn"===t)game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class SystemManager extends t.api.SystemManager{getActionHandler(){return new r}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(e){let t;return t=new l,t}async registerDefaults(){return c}registerSettings(e){register(e)}registerStyles(){return{template:{class:"tah-style-template-style",file:"tah-template-style",moduleId:e.ID,name:"Template Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.5",SystemManager:d},Hooks.call("tokenActionHudSystemReady",t)}));export{i as ACTION_TYPE,r as ActionHandler,t as CORE_MODULE,c as DEFAULTS,n as GROUP,a as ITEM_TYPE,e as MODULE,s as REQUIRED_CORE_MODULE_VERSION,l as RollHandler,d as SystemManager,o as Utils,register};
//# sourceMappingURL=token-action-hud-template.min.js.map
