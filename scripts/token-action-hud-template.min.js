const e={ID:"token-action-hud-cyberpunk-red"},t={ID:"token-action-hud-core"},a="1.5",l={interface:"tokenActionHud.template.interface",skill:"tokenActionHud.template.skill",attack:"tokenActionHud.template.attack",stat:"tokenActionHud.template.stat"},i={cyberdeck:{id:"cyberdeck",name:"tokenActionHud.template.cyberdeck",type:"system"},cyberware:{id:"cyberware",name:"tokenActionHud.template.cyberware",type:"system"},deathsave:{id:"deathsave",name:"tokenActionHud.template.deathsave",type:"system"},effects:{id:"effects",name:"tokenActionHud.template.effects",type:"system"},facedown:{id:"facedown",name:"tokenActionHud.template.facedown",type:"system"},gear:{id:"gear",name:"tokenActionHud.template.gear",type:"system"},interface:{id:"interface",name:"tokenActionHud.template.interface",type:"system"},program:{id:"program",name:"tokenActionHud.template.programs",type:"system"},role:{id:"role",name:"tokenActionHud.template.role",type:"system"},skill:{id:"skill",name:"tokenActionHud.template.skill",type:"system"},stat:{id:"stat",name:"tokenActionHud.template.stat",type:"system"},weapon:{id:"weapon",name:"tokenActionHud.template.weapon",type:"system"}},s={activeEffects:{groupId:"activeEffects"},ammo:{groupId:"ammo"},armor:{groupId:"armor"},clothing:{groupId:"clothing"},criticalInjury:{groupId:"criticalInjury"},cyberdeck:{groupId:"cyberdeck"},cyberware:{groupId:"cyberware"},drug:{groupId:"drug"},gear:{groupId:"gear"},interface:{groupId:"interface"},upgrade:{groupId:"upgrade"},netArchitecture:{groupId:"netArchitecture"},program:{groupId:"program"},role:{groupId:"role"},skill:{groupId:"skill"},vehicle:{groupId:"vehicle"},weapon:{groupId:"weapon"}},o=["blackIce","character","demon","mook"],r={CYBERWARE:"cyberware",SKILL:"skill",STAT:"stat",WEAPON:"weapon"},n={AIMED:"aimed",ATTACK:"attack",AUTOFIRE:"autofire",BASE:"base",CYBERDECKPROGRAM:"cyberdeckProgram",DAMAGE:"damage",DEATHSAVE:"deathsave",FACEDOWN:"facedown",HUMANITY:"humanity",INTERFACEABILITY:"interface",NET:"net",ROLEABILITY:"roleAbility",SKILL:"skill",STAT:"stat",SUPPRESSIVE:"suppressive"};let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{c=class Utils{static getSetting(a,l=null){let i=l??null;try{i=game.settings.get(e.ID,a)}catch{t.api.Logger.debug(`Setting '${a}' not found`)}return i}static async setSetting(a,l){try{l=await game.settings.set(e.ID,a,l),t.api.Logger.debug(`Setting '${a}' set to '${l}'`)}catch{t.api.Logger.debug(`Setting '${a}' not found`)}}}}));let m=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{m=class ActionHandler extends e.api.ActionHandler{async buildSystemActions(t){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=c.getSetting("displayUnequipped"),this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}switch(this.actorType){case"character":case"mook":this.#e();break;case"blackIce":this.#t();case"demon":this.#a()}this.actor||this.#l()}async#t(){const t=this.actor.token.flags["cyberpunk-red-core"].programUUID.split("."),{standard:a,blackIce:l}=game.items.get(t[1]).system.damage,i=[];Number.isNumeric(Number.parseInt(a))&&i.push({encodedValue:[n.NET,"standard"].join(this.delimiter),id:t,info1:{text:a},name:e.api.Utils.i18n("tokenActionHud.template.standard")}),Number.isNumeric(Number.parseInt(l))&&i.push({encodedValue:[n.NET,"blackIce"].join(this.delimiter),id:t,info1:{text:l},name:e.api.Utils.i18n("tokenActionHud.template.blackIce")}),this.addActions(i,{id:"weapon",type:"system"})}#e(){this.#i(),this.#s(),this.#o(),this.#r(),this.#a()}#l(){}async#i(){const t={id:n.DEATHSAVE,type:"system"},a=e.api.Utils.i18n("tokenActionHud.template.deathsave"),l=[{encodedValue:[t.id,t.id].join(this.delimiter),id:t.id,listName:t.id,name:a}];this.addActions(l,t)}async#s(){const t={id:n.FACEDOWN,type:"system"},a=e.api.Utils.i18n("tokenActionHud.template.facedown"),l=[{encodedValue:[t.id,t.id].join(this.delimiter),id:t.id,listName:t.id,name:a}];this.addActions(l,t)}async#r(){if(0===this.items.size)return;let t="item";const a=new Map;for(const[e,t]of this.items){const l=t.type,i=t.equipped;if(("cyberware"!==l||t.system.isWeapon)&&(i||this.displayUnequipped)){const i=a.get(l)??new Map;i.set(e,t),a.set(l,i)}}for(let[i,o]of a){const a=s[i]?.groupId;if(!a)continue;"role"===i?(o=await this.#n([i,o]),t="role"):t="item";const r={id:a,type:"system"},n=[...o].map((([a,i])=>{const s=a;let o=i.name;const r=e.api.Utils.i18n(l[t]),n=`${r?`${r}: `:""}${o}`,c=[t,s].join(this.delimiter);let m,d;switch(i.type){case"cyberware":case"cyberdeck":case"gear":case"weapon":m=e.api.Utils.getImage(i);break;default:m=void 0}if("skill"===i.type){let e=0;e+=i.system.level+this.actor.system.stats[i.system.stat].value,d={text:e.toString()},o=[o,`[${i.system.stat}]`.toUpperCase()].join(" ")}return{encodedValue:c,id:s,img:m,info1:d,listName:n,name:o}}));this.addActions(n,r)}}async#o(){if(0===this.items.size)return;let e;for(const[t,a]of this.items)"cyberdeck"===a.type&&"equipped"===a.system.equipped&&(e=t);if(!e)return;const t=[["backdoor","Backdoor"],["cloak","Cloak"],["control","Control"],["eyedee","Eye-Dee"],["pathfinder","Pathfinder"],["scanner","Scanner"],["slide","Slide"],["virus","Virus"],["zap","Zap"]],a=[];for(let[e,l]of t)a.push({encodedValue:["interface",e].join(this.delimiter),id:e,listName:e,name:l});this.addActions(a,{id:"interface",type:"system"})}async#c(){if(0===this.items.size)return;const e=Array.from(this.items).find((([e,t])=>"cyberdeck"===t.type&&"equipped"===t.system.equipped)),t=Array.from(this.items).filter((([t,a])=>"program"===a.type&&a.system.installedIn.includes(e[1].id)));console.debug("*** buildProgramActions",{actor:this.actor,items:this.items,activeCyberdeck:e,installedProgramItems:t});const a=new Map;for(const[e,t]of this.items){const l=t.type;if(t.equipped||this.displayUnequipped){const i=a.get(l)??new Map;i.set(e,t),a.set(l,i)}}}async#n([e,t]){const a=new Map;return this.actor.system.externalData.hiddenRoleItems||this.actor.update({"system.externalData.hiddenRoleItems":hiddenRoleItems}),t.forEach((async t=>{if(t.system.hasRoll){const l=`${t.system.mainRoleAbility} [${t.name}]`,i=[t.name,t.system.mainRoleAbility].join(this.delimiter);let s=await t.clone();s.baseItem=t,s.name=l,s.rollSubType="mainRoleAbility",s.subRoleName=t.system.mainRoleAbility,s.type=e,s.encodedValue=i,a.set(i,s)}t.system.abilities.length&&t.system.abilities.forEach((async l=>{if(l.hasRoll){const i=`${l.name} [${t.name}]`,s=[t.name,l.name].join(this.delimiter);let o=await t.clone();o.baseItem=t,o.name=i,o.rollSubType="subRoleAbility",o.subRoleName=l.name,o.type=e,o.encodedValue=s,a.set(s,o)}}))})),this.actor.system.externalData.secretItems=await a,a}async#a(){const t=Object.entries(this.actor.system.stats).filter((([e,t])=>!["rez","actions"].includes(e))).map((t=>{const a=e.api.Utils.i18n(`tokenActionHud.template.stats.${t[0]}`);let l;switch(this.actorType){case"character":case"mook":l=this.actor.system.stats[t[0]].value;break;case"blackIce":case"demon":l=this.actor.system.stats[t[0]]}return{encodedValue:["stat",t[0]].join(this.delimiter),id:t[0],info1:{text:l.toString()},listName:t[0],name:a}}));this.addActions(t,{id:"stat",type:"system"})}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=i;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const a=Object.values(t);d={layout:[{nestId:"character",id:"character",name:e.api.Utils.i18n("tokenActionHud.template.character"),groups:[{...t.stat,nestId:"character_stat"},{...t.role,nestId:"character_role"},{...t.facedown,nestId:"character_facedown"},{...t.deathsave,nestId:"character_deathsave"}]},{nestId:"skill",id:"skill",name:e.api.Utils.i18n("tokenActionHud.template.skills"),groups:[{...t.skill,nestId:"skill_skill"}]},{nestId:"weapon",id:"weapon",name:e.api.Utils.i18n("tokenActionHud.template.weapons"),groups:[{...t.weapon,nestId:"weapon_weapon"},{...t.cyberware,nestId:"weapon_cyberware"}]},{nestId:"netrunning",id:"netrunning",name:e.api.Utils.i18n("tokenActionHud.template.netrunning"),groups:[{...t.interface,nestId:"netrunning_interface"}]},{nestId:"gear",id:"gear",name:e.api.Utils.i18n("tokenActionHud.template.gear"),groups:[{...t.gear,nestId:"gear_gear"}]},{nestId:"effects",id:"effects",name:e.api.Utils.i18n("tokenActionHud.template.effects"),groups:[{...t.effects,nestId:"effects_effects"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.template.utility"),groups:[{...t.utility,nestId:"utility_utility"}]}],groups:a}}));class LOGGER{static log(e){console.log(`CPR LOG | ${e}`)}static debug(e){game.settings.get(game.system.id,"debugLogs")&&(console.debug(`CPR DBG | ${e}`),"object"==typeof e&&null!==e&&console.log(e))}static debugObject(e){game.settings.get(game.system.id,"debugLogs")&&console.debug(e)}static warn(e){console.warn(`CPR WRN | ${e}`)}static trace(e){game.settings.get(game.system.id,"traceLogs")&&console.log(`CPR TRC | ${e}`)}static error(e,...t){"object"==typeof e?console.error(e,...t):console.error(`CPR ERR | ${e}`,...t)}static credits(){console.log("SPECIAL THANKS TO MOO MAN FOR HIS PATIENCE AND HELP!"),console.log("\n          (__)             (__)             (__)             (__)\n          (oo)             (oo)             (oo)             (oo)\n   /-------\\/      /-------\\/      /-------\\/      /-------\\/\n  / |     ||       / |     ||       / |     ||       / |     ||\n *  ||----||      *  ||W---||      *  ||w---||      *  ||V---||\n    ^^    ^^\n    ")}}class DiceSoNice{static async ShowDiceSoNice(e,t){if(LOGGER.trace("ShowDiceSoNice | DiceSoNice | called."),game.modules.get("dice-so-nice")&&game.modules.get("dice-so-nice").active){let a=null,l=!1;switch(t||game.settings.get("core","rollMode")){case"blindroll":l=!0;break;case"gmroll":{const e=game.users.filter((e=>e.isGM)),t=[];e.forEach((e=>t.push(e._id))),a=t;break}case"selfroll":a=[game.user.id];break;case"roll":{const e=game.users.filter((e=>e.active)),t=[];e.forEach((e=>t.push(e._id))),a=t;break}}await game.dice3d.showForRoll(e,game.user,!0,a,l)}}}class CPRSystemUtils{static GetWorldCompendia(e=null){if(LOGGER.trace("GetWorldCompendia | CPRSystemUtils | Called."),!game.packs)return[];const t=game.packs.filter((e=>"world"===e.metadata.packageType));return e?t.filter((t=>t.metadata.type===e)):t}static async GetCompendiumDoc(e,t){LOGGER.trace("GetCompendiumDoc | CPRSystemUtils | Called.");const a=game.packs.get(e);return a.getDocument(a.index.contents.filter((e=>e.name===t))[0]._id)}static GetCompendiumIdByLabel(e){LOGGER.trace("GetCompendiumIdByLabel | CPRSystemUtils | Called.");const t=game.packs.filter((t=>t.metadata.label===e));if(t.length>1)this.DisplayMessage("warn",`${this.Localize("CPR.messages.duplicateCompendiumLabel")} "${e}"`);else if(0===t.length)return this.DisplayMessage("error",`${this.Localize("CPR.messages.noCompendiumLabel")} "${e}"`),null;return t[0].metadata.id}static async GetCompendiumDocs(e){return LOGGER.trace("GetCompendiumDocs | CPRSystemUtils | Called."),game.packs.get(e).getDocuments()}static GetThemes(e){LOGGER.trace("GetThemes | CPRSystemUtils | Called.");const t=e,a={},l=game.modules.filter((e=>e.active&&e&&e.cprcThemes));for(const e of l){const t=e.cprcThemes;Object.assign(a,t)}return{...t,...a}}static SetTheme(e){LOGGER.trace("SetThemes | CPRSystemUtils | Called.");const t=game.settings.get(game.system.id,"theme")?game.settings.get(game.system.id,"theme"):"default";e?e.ownerDocument.documentElement.setAttribute("data-cpr-theme",t):document.documentElement.setAttribute("data-cpr-theme",t)}static async GetCoreSkills(){return LOGGER.trace("GetCoreSkills | CPRSystemUtils | Called."),CPRSystemUtils.GetCompendiumDocs(`${game.system.id}.internal_skills`)}static async GetCoreCyberware(){return LOGGER.trace("GetCoreCyberware | CPRSystemUtils | Called."),CPRSystemUtils.GetCompendiumDocs(`${game.system.id}.internal_cyberware-core`)}static async GetDvTables(){LOGGER.trace("GetDvTables | CPRSystemUtils | called.");const e=await CPRSystemUtils.GetCompendiumDocs(game.settings.get(game.system.id,"dvRollTableCompendium"));return e.sort(((e,t)=>e.name>t.name?1:-1)),e}static async SetDvTable(e,t){LOGGER.trace("SetDvTable | CPRSystemUtils | called.");const a=await CPRSystemUtils.GetDvTables(),[l]=a.filter((e=>e.name===t)),i=l?{name:l.name,table:{}}:null;if(l)for(const e of l.results)if(0===e.type){const{range:t}=e,a=`${t[0]}_${t[1]}`,l=e.text;i.table[a.toString()]=l}await e.document.unsetFlag(game.system.id,"cprDvTable"),await e.document.setFlag(game.system.id,"cprDvTable",i)}static GetRollTables(e,t){let a;if(LOGGER.trace("GetRollTables | CPRSystemUtils | Called."),t){const t=new RegExp(e);a=game.tables.filter((e=>e.name.match(t)))}else a=game.tables.filter((t=>t.name===e));return a}static async GetFolder(e,t,a=null){LOGGER.trace("GetFolder | CPRSystemUtils | Called.");const l=game.folders.filter((a=>a.name===t&&a.type===e));return 1===l.length?l[0]:Folder.create({name:t,type:e,parent:a})}static async DisplayMessage(e,t){LOGGER.trace("DisplayMessage | CPRSystemUtils | Called.");const a=CPRSystemUtils.Localize(t);switch(e){case"warn":ui.notifications.warn(a),LOGGER.warn(a);break;case"error":ui.notifications.error(a),LOGGER.error(a);break;case"notify":ui.notifications.notify(a),LOGGER.log(a)}}static Localize(e){return game.i18n.localize(e)}static Format(e,t){return game.i18n.format(e,t)}static slugify(e){LOGGER.trace("slugify | CPRSkillItem | Called.");const t=e,a=t.split(" ").join(""),l=a.split("/").join("Or"),i=a.split("(").join("").split(")").join(""),s=a.split("/").join("And").split("&").join("And");return"Conceal/Reveal Object"===t||"Paint/Draw/Sculpt"===t||"Resist Torture/Drugs"===t?l.charAt(0).toLowerCase()+l.slice(1):"Language (Streetslang)"===t?i.charAt(0).toLowerCase()+i.slice(1):s.charAt(0).toLowerCase()+s.slice(1)}static SortItemListByName(e){LOGGER.trace("SortItemListByName | CPRSystemUtils | Called.");const t=e.map((e=>({name:e.name,uuid:e.uuid,type:e.type}))),a=t.length>0?[]:e;if(0===a.length){const l=[];t.forEach((e=>{const t=duplicate(e),a=`CPR.global.itemType.${t.type}.`.concat(this.slugify(t.name));this.Localize(a)!==a&&(t.name=this.Localize(a)),l.push(t)})),l.sort(((e,t)=>{let a=0;return e.name>t.name?a=1:t.name>e.name&&(a=-1),a}));for(const t of l){const[l]=e.filter((e=>e.uuid===t.uuid));a.push(l)}}return a}static SetUserSetting(e,t,a,l){LOGGER.trace("SetUserSetting | CPRSystemUtils | Called.");const i=game.settings.get(game.system.id,"userSettings")?game.settings.get(game.system.id,"userSettings"):{};switch(e){case"sheetConfig":{const e=`${l}-${t}`;let s=i.sheetConfig;void 0===s&&(s={}),s[e]=a,i.sheetConfig=s;break}default:i[t]=a}game.settings.set(game.system.id,"userSettings",i)}static GetUserSetting(e,t,a){LOGGER.trace("GetUserSetting | CPRSystemUtils | Called.");const l=game.settings.get(game.system.id,"userSettings")?game.settings.get(game.system.id,"userSettings"):{};let i;switch(e){case"sheetConfig":{const e=`${a}-${t}`,s=l.sheetConfig;void 0!==s&&(i=s[e]);break}default:i=l[t]}return i}static GetDefaultImage(e,t){LOGGER.trace("GetDefaultImage | CPRSystemUtils | Called.");let a="";if("Item"===e)switch(t){case"ammo":a=`systems/${game.system.id}/icons/compendium/default/Default_Ammo.svg`;break;case"armor":a=`systems/${game.system.id}/icons/compendium/default/Default_Armor.svg`;break;case"clothing":a=`systems/${game.system.id}/icons/compendium/default/Default_Clothing.svg`;break;case"criticalInjury":a=`systems/${game.system.id}/icons/compendium/default/Default_Critical_Injury.svg`;break;case"cyberdeck":a=`systems/${game.system.id}/icons/compendium/default/Default_Cyberdeck.svg`;break;case"cyberware":a=`systems/${game.system.id}/icons/compendium/default/Default_Cyberware.svg`;break;case"gear":default:a=`systems/${game.system.id}/icons/compendium/default/Default_Gear.svg`;break;case"netarch":a=`systems/${game.system.id}/icons/compendium/default/Default_Net_Architecture.svg`;break;case"program":a=`systems/${game.system.id}/icons/compendium/default/Default_Program.svg`;break;case"role":a=`systems/${game.system.id}/icons/compendium/default/Default_Role.svg`;break;case"skill":a=`systems/${game.system.id}/icons/compendium/default/Default_Skill.svg`;break;case"vehicle":a=`systems/${game.system.id}/icons/compendium/default/Default_Vehicle.svg`;break;case"weapon":a=`systems/${game.system.id}/icons/compendium/default/Default_Weapon.svg`}else if("Actor"===e)switch(t){case"blackIce":a=`systems/${game.system.id}/icons/compendium/default/default-blackice.svg`;break;case"container":a=`systems/${game.system.id}/icons/compendium/default/Default_Container.svg`;break;case"demon":a=`systems/${game.system.id}/icons/compendium/default/default-demon.svg`;break;case"mook":a=`systems/${game.system.id}/icons/compendium/default/Default_Mook.svg`;break;default:a=`systems/${game.system.id}/icons/compendium/default/Default_CPR_Mystery_Man.svg`}return a}static getPrototypeChain(e){LOGGER.trace("getPrototypeChain | CPRSystemUtils | Called.");const t=[];let a=e;for(;a;)a=Object.getPrototypeOf(a),a&&"Object"!==a.constructor.name&&t.push(a.constructor.name);return t}static getUserTargetedOrSelected(e){LOGGER.trace("getUserTargetedOrSelected | CPRSystemUtils | Called.");const t=new Set(game.user.targets),a="selected"===e?canvas.tokens.controlled:Array.from(t);return a.sort(((e,t)=>e.name>t.name?1:-1)),a}static GetTemplateItemTypes(e){LOGGER.trace("GetTemplateItemTypes | CPRSystemUtils | Called.");const t=[];return game.system.template.Item.types.forEach((a=>{game.system.template.Item[a].templates.includes(e)&&t.push(a)})),t}static getDataModelTemplates(e){return LOGGER.trace("getDataModelTemplates | CPRSystemUtils | Called."),game.system.template.Item[e].templates.filter((e=>"common"!==e))}static hasDataModelTemplate(e,t){return LOGGER.trace("hasDataModelTemplate | CPRSystemUtils | Called."),CPRSystemUtils.getDataModelTemplates(e).includes(t)}static updateMigrationBar(e,t){LOGGER.trace("updateMigrationBar | CPRSystemUtils");const a=document.getElementById("cpr-migrating");if(null===a){const t=document.createElement("div");t.id="cpr-migrating",t.style="display: block;";const a=document.createElement("div");a.id="cpr-migration-bar",a.style=`width: ${e}%`,a.className="migration-bar";const l=document.createElement("label");l.id="cpr-mig-context",l.innerHTML="Migration Test";const i=document.createElement("label");i.id="cpr-mig-progress",i.innerHTML=`${e}%`,a.appendChild(l),a.appendChild(i),t.appendChild(a);document.getElementById("ui-top").appendChild(t)}else a.querySelector("#cpr-mig-context").textContent=t,a.querySelector("#cpr-mig-progress").textContent=`${e}%`,a.children["cpr-migration-bar"].style=`width: ${e}%`,a.style.display="block";100!==e||a.hidden||$(a).fadeOut(2e3)}static fadeMigrationBar(){LOGGER.trace("fadeMigrationBar | CPRSystemUtils");const e=document.getElementById("cpr-migrating");null!==e&&(e.hidden||$(e).fadeOut(2e3))}static GetEventDatum(e,t){LOGGER.trace("GetEventDatum | CPRSystemUtils | Called.");let a=$(e.currentTarget).attr(t);return void 0===a&&(LOGGER.debug(`Could not find ${t} in currentTarget trying .item parents`),a=$(e.currentTarget).parents(".item").attr(t),void 0===a&&LOGGER.debug(`Could not find ${t} in the event data!`)),a}static isNumeric(e){return LOGGER.trace("isNumeric | CPRSystemUtils | Called."),!Number.isNaN(e)||(LOGGER.error("Expected a numeric, but received NaN"),!1)}}const g={statList:{int:"CPR.global.stats.int",ref:"CPR.global.stats.ref",dex:"CPR.global.stats.dex",tech:"CPR.global.stats.tech",cool:"CPR.global.stats.cool",will:"CPR.global.stats.will",move:"CPR.global.stats.move",body:"CPR.global.stats.body",luck:"CPR.global.stats.luck",emp:"CPR.global.stats.emp"},roleList:{exec:"CPR.global.role.exec.name",fixer:"CPR.global.role.fixer.name",lawman:"CPR.global.role.lawman.name",media:"CPR.global.role.media.name",medtech:"CPR.global.role.medtech.name",netrunner:"CPR.global.role.netrunner.name",nomad:"CPR.global.role.nomad.name",rockerboy:"CPR.global.role.rockerboy.name",solo:"CPR.global.role.solo.name",tech:"CPR.global.role.tech.name"},roleAbilityList:{backup:"CPR.global.role.lawman.ability.backup",charismaticImpact:"CPR.global.role.rockerboy.ability.charismaticImpact",combatAwareness:"CPR.global.role.solo.ability.combatAwareness",credibility:"CPR.global.role.media.ability.credibility",damageDeflection:"CPR.global.role.solo.ability.damageDeflection",fabricationExpertise:"CPR.global.role.tech.ability.fabricationExpertise",fieldExpertise:"CPR.global.role.tech.ability.fieldExpertise",fumbleRecovery:"CPR.global.role.solo.ability.fumbleRecovery",initiativeReaction:"CPR.global.role.solo.ability.initiativeReaction",interface:"CPR.global.role.netrunner.ability.interface",inventionExpertise:"CPR.global.role.tech.ability.inventionExpertise",maker:"CPR.global.role.tech.ability.maker",medicine:"CPR.global.role.medtech.ability.medicine",medtechCryo:"CPR.global.role.medtech.ability.medtechCryo",medtechPharma:"CPR.global.role.medtech.ability.medtechPharma",moto:"CPR.global.role.nomad.ability.moto",operator:"CPR.global.role.fixer.ability.operator",precisionAttack:"CPR.global.role.solo.ability.precisionAttack",spotWeakness:"CPR.global.role.solo.ability.spotWeakness",surgery:"CPR.global.role.medtech.ability.surgery",teamwork:"CPR.global.role.exec.ability.teamwork",threatDetection:"CPR.global.role.solo.ability.threatDetection",upgradeExpertise:"CPR.global.role.tech.ability.upgradeExpertise"},skillCategories:{awarenessSkills:"CPR.global.skillCategories.awarenessSkills",bodySkills:"CPR.global.skillCategories.bodySkills",controlSkills:"CPR.global.skillCategories.controlSkills",educationSkills:"CPR.global.skillCategories.educationSkills",fightingSkills:"CPR.global.skillCategories.fightingSkills",performanceSkills:"CPR.global.skillCategories.performanceSkills",rangedweaponSkills:"CPR.global.skillCategories.rangedWeaponSkills",socialSkills:"CPR.global.skillCategories.socialSkills",techniqueSkills:"CPR.global.skillCategories.techniqueSkills"},skillCategoriesForWeapons:{fightingSkills:"CPR.global.skillCategories.fightingSkills",rangedweaponSkills:"CPR.global.skillCategories.rangedWeaponSkills",bodySkills:"CPR.global.skillCategories.bodySkills",controlSkills:"CPR.global.skillCategories.controlSkills",awarenessSkills:"CPR.global.skillCategories.awarenessSkills",educationSkills:"CPR.global.skillCategories.educationSkills",performanceSkills:"CPR.global.skillCategories.performanceSkills",socialSkills:"CPR.global.skillCategories.socialSkills",techniqueSkills:"CPR.global.skillCategories.techniqueSkills"},skillList:{accounting:"CPR.global.itemType.skill.accounting",acting:"CPR.global.itemType.skill.acting",airVehicleTech:"CPR.global.itemType.skill.airVehicleTech",animalHandling:"CPR.global.itemType.skill.animalHandling",archery:"CPR.global.itemType.skill.archery",athletics:"CPR.global.itemType.skill.athletics",autofire:"CPR.global.itemType.skill.autofire",basicTech:"CPR.global.itemType.skill.basicTech",brawling:"CPR.global.itemType.skill.brawling",bribery:"CPR.global.itemType.skill.bribery",bureaucracy:"CPR.global.itemType.skill.bureaucracy",business:"CPR.global.itemType.skill.business",composition:"CPR.global.itemType.skill.composition",concealOrRevealObject:"CPR.global.itemType.skill.concealOrRevealObject",concentration:"CPR.global.itemType.skill.concentration",contortionist:"CPR.global.itemType.skill.contortionist",conversation:"CPR.global.itemType.skill.conversation",criminology:"CPR.global.itemType.skill.criminology",cryptography:"CPR.global.itemType.skill.cryptography",cybertech:"CPR.global.itemType.skill.cybertech",dance:"CPR.global.itemType.skill.dance",deduction:"CPR.global.itemType.skill.deduction",demolitions:"CPR.global.itemType.skill.demolitions",driveLandVehicle:"CPR.global.itemType.skill.driveLandVehicle",education:"CPR.global.itemType.skill.education",electronicsAndSecurityTech:"CPR.global.itemType.skill.electronicsAndSecurityTech",endurance:"CPR.global.itemType.skill.endurance",evasion:"CPR.global.itemType.skill.evasion",forgery:"CPR.global.itemType.skill.forgery",firstAid:"CPR.global.itemType.skill.firstAid",gamble:"CPR.global.itemType.skill.gamble",handgun:"CPR.global.itemType.skill.handgun",heavyWeapons:"CPR.global.itemType.skill.heavyWeapons",humanPerception:"CPR.global.itemType.skill.humanPerception",interrogation:"CPR.global.itemType.skill.interrogation",landVehicleTech:"CPR.global.itemType.skill.landVehicleTech",language:"CPR.global.itemType.skill.language",librarySearch:"CPR.global.itemType.skill.librarySearch",lipReading:"CPR.global.itemType.skill.lipReading",localExpert:"CPR.global.itemType.skill.localExpert",martialArts:"CPR.global.itemType.skill.martialArts",meleeWeapon:"CPR.global.itemType.skill.meleeWeapon",paintOrDrawOrSculpt:"CPR.global.itemType.skill.paintOrDrawOrSculpt",paramedic:"CPR.global.itemType.skill.paramedic",perception:"CPR.global.itemType.skill.perception",personalGrooming:"CPR.global.itemType.skill.personalGrooming",persuasion:"CPR.global.itemType.skill.persuasion",photographyAndFilm:"CPR.global.itemType.skill.photographyAndFilm",pickLock:"CPR.global.itemType.skill.pickLock",pickPocket:"CPR.global.itemType.skill.pickPocket",pilotAirVehicle:"CPR.global.itemType.skill.pilotAirVehicle",pilotSeaVehicle:"CPR.global.itemType.skill.pilotSeaVehicle",playInstrument:"CPR.global.itemType.skill.playInstrument",resistTortureOrDrugs:"CPR.global.itemType.skill.resistTortureOrDrugs",riding:"CPR.global.itemType.skill.riding",science:"CPR.global.itemType.skill.science",seaVehicleTech:"CPR.global.itemType.skill.seaVehicleTech",shoulderArms:"CPR.global.itemType.skill.shoulderArms",stealth:"CPR.global.itemType.skill.stealth",streetWise:"CPR.global.itemType.skill.streetwise",tactics:"CPR.global.itemType.skill.tactics",trading:"CPR.global.itemType.skill.trading",tracking:"CPR.global.itemType.skill.tracking",wardrobeAndStyle:"CPR.global.itemType.skill.wardrobeAndStyle",weaponstech:"CPR.global.itemType.skill.weaponstech",wildernessSurvival:"CPR.global.itemType.skill.wildernessSurvival"},skillDifficulties:{typical:"CPR.global.itemType.skill.difficulty.typical",difficult:"CPR.global.itemType.skill.difficulty.difficult",role:"CPR.global.itemType.skill.difficulty.role"},weaponTypeList:{assaultRifle:"CPR.global.weaponType.assaultRifle",bow:"CPR.global.weaponType.bowsAndCrossbows",grenadeLauncher:"CPR.global.weaponType.grenadeLauncher",heavyMelee:"CPR.global.weaponType.heavyMeleeWeapon",heavyPistol:"CPR.global.weaponType.heavyPistol",heavySmg:"CPR.global.weaponType.heavySmg",lightMelee:"CPR.global.weaponType.lightMeleeWeapon",martialArts:"CPR.global.weaponType.martialArts",medMelee:"CPR.global.weaponType.mediumMeleeWeapon",medPistol:"CPR.global.weaponType.mediumPistol",rocketLauncher:"CPR.global.weaponType.rocketLauncher",shotgun:"CPR.global.weaponType.shotgun",smg:"CPR.global.weaponType.smg",sniperRifle:"CPR.global.weaponType.sniperRifle",thrownWeapon:"CPR.global.weaponType.thrownWeapon",unarmed:"CPR.global.weaponType.unarmed",vHeavyMelee:"CPR.global.weaponType.veryHeavyMeleeWeapon",vHeavyPistol:"CPR.global.weaponType.veryHeavyPistol"},ammoVariety:{arrow:"CPR.global.ammo.variety.arrow",battery:"CPR.global.ammo.variety.battery",grenade:"CPR.global.ammo.variety.grenade",heavyPistol:"CPR.global.ammo.variety.heavyPistol",medPistol:"CPR.global.ammo.variety.mediumPistol",paintball:"CPR.global.ammo.variety.paintball",rifle:"CPR.global.ammo.variety.rifle",rocket:"CPR.global.ammo.variety.rocket",shotgunShell:"CPR.global.ammo.variety.shell",shotgunSlug:"CPR.global.ammo.variety.slug",vHeavyPistol:"CPR.global.ammo.variety.veryHeavyPistol",custom:"CPR.global.ammo.variety.custom"},ammoType:{basic:"CPR.global.ammo.type.basic",acid:"CPR.global.ammo.type.acid",armorPiercing:"CPR.global.ammo.type.armorPiercing",biotoxin:"CPR.global.ammo.type.biotoxin",emp:"CPR.global.ammo.type.emp",expansive:"CPR.global.ammo.type.expansive",flashbang:"CPR.global.ammo.type.flashBang",incendiary:"CPR.global.ammo.type.incendiary",poison:"CPR.global.ammo.type.poison",rubber:"CPR.global.ammo.type.rubber",sleep:"CPR.global.ammo.type.sleep",smart:"CPR.global.ammo.type.smart",smoke:"CPR.global.ammo.type.smoke",teargas:"CPR.global.ammo.type.tearGas",special:"CPR.global.ammo.type.special"},ammoDamageOverrideModes:{none:"CPR.global.generic.no",set:"CPR.global.generic.set",modify:"CPR.global.generic.modify"},ammoAutofireOverrideModes:{none:"CPR.global.generic.no",set:"CPR.global.generic.set",modify:"CPR.global.generic.modify"},inventoryCategories:{weapon:"CPR.global.itemTypes.weapon",ammo:"CPR.global.itemTypes.ammo",armor:"CPR.global.itemTypes.armor",cyberware:"CPR.global.itemTypes.cyberware",drug:"CPR.global.itemTypes.drug",gear:"CPR.global.itemTypes.gear",clothing:"CPR.global.itemTypes.clothing",vehicle:"CPR.global.itemTypes.vehicle",cyberdeck:"CPR.global.itemTypes.cyberdeck",program:"CPR.global.itemTypes.program",itemUpgrade:"CPR.global.itemTypes.itemUpgrade"},objectTypes:{ammo:"CPR.global.itemTypes.ammo",armor:"CPR.global.itemTypes.armor",clothing:"CPR.global.itemTypes.clothing",criticalInjury:"CPR.global.itemTypes.criticalInjury",cyberdeck:"CPR.global.itemTypes.cyberdeck",cyberware:"CPR.global.itemTypes.cyberware",drug:"CPR.global.itemTypes.drug",gear:"CPR.global.itemTypes.gear",itemUpgrade:"CPR.global.itemTypes.itemUpgrade",netarch:"CPR.global.itemTypes.netArchitecture",program:"CPR.global.itemTypes.program",role:"CPR.global.itemTypes.role",skill:"CPR.global.itemTypes.skill",vehicle:"CPR.global.itemTypes.vehicle",weapon:"CPR.global.itemTypes.weapon"},clothingStyle:{asiaPop:"CPR.global.clothing.style.asiaPop",bagLadyChic:"CPR.global.clothing.style.bagLadyChic",bohemian:"CPR.global.clothing.style.bohemian",businesswear:"CPR.global.clothing.style.businessWear",gangColors:"CPR.global.clothing.style.gangColors",genericChic:"CPR.global.clothing.style.genericChic",highFashion:"CPR.global.clothing.style.highFashion",leisurewear:"CPR.global.clothing.style.leisureWear",nomadLeathers:"CPR.global.clothing.style.nomadLeathers",urbanFlash:"CPR.global.clothing.style.urbanFlash"},clothingType:{bottoms:"CPR.global.clothing.type.bottoms",contactLenses:"CPR.global.clothing.type.contactLenses",footwear:"CPR.global.clothing.type.footWear",glasses:"CPR.global.clothing.type.glasses",hats:"CPR.global.clothing.type.hats",jacket:"CPR.global.clothing.type.jacket",jewelry:"CPR.global.clothing.type.jewelry",mirrorshades:"CPR.global.clothing.type.mirrorshades",top:"CPR.global.clothing.type.top"},cyberwareTypeList:{cyberAudioSuite:"CPR.global.cyberwareType.cyberAudioSuite",cyberEye:"CPR.global.cyberwareType.cyberEye",cyberArm:"CPR.global.cyberwareType.cyberArm",cyberLeg:"CPR.global.cyberwareType.cyberLeg",neuralWare:"CPR.global.cyberwareType.neuralware",cyberwareInternal:"CPR.global.cyberwareType.cyberwareInternal",cyberwareExternal:"CPR.global.cyberwareType.cyberwareExternal",fashionware:"CPR.global.cyberwareType.fashionware",borgware:"CPR.global.cyberwareType.borgware"},cyberwareInstallList:{mall:"CPR.global.cyberwareInstall.mall",clinic:"CPR.global.cyberwareInstall.clinic",hospital:"CPR.global.cyberwareInstall.hospital",notApplicable:"CPR.global.generic.notApplicable"},woundState:{notWounded:"CPR.global.woundState.notWounded",lightlyWounded:"CPR.global.woundState.lightlyWounded",seriouslyWounded:"CPR.global.woundState.seriouslyWounded",mortallyWounded:"CPR.global.woundState.mortallyWounded",dead:"CPR.global.woundState.dead"},equipped:{carried:"CPR.global.equipState.carried",equipped:"CPR.global.equipState.equipped",owned:"CPR.global.equipState.owned"},itemPriceCategory:{free:"CPR.global.priceCategory.free",dirtCheap:"CPR.global.priceCategory.dirtCheap",cheap:"CPR.global.priceCategory.cheap",everyday:"CPR.global.priceCategory.everyday",costly:"CPR.global.priceCategory.costly",premium:"CPR.global.priceCategory.premium",expensive:"CPR.global.priceCategory.expensive",veryExpensive:"CPR.global.priceCategory.veryExpensive",luxury:"CPR.global.priceCategory.luxury",superLuxury:"CPR.global.priceCategory.superLuxury"},itemPriceCategoryMap:{free:0,dirtCheap:5,cheap:10,everyday:20,costly:50,premium:100,expensive:500,veryExpensive:1e3,luxury:5e3,superLuxury:1e4},itemQuality:{poor:"CPR.global.itemQuality.poor",standard:"CPR.global.itemQuality.standard",excellent:"CPR.global.itemQuality.excellent"},criticalInjuryTables:{"Critical Injuries (Head)":"critical-injuries-head","Critical Injuries (Body)":"critical-injuries-body"},defaultCriticalInjuryTable:"cyberpunk-red-core.internal_critical-injury-tables",defaultNetArchTable:"cyberpunk-red-core.internal_net-rolltables",defaultDvTable:"cyberpunk-red-core.internal_dv-tables",changelogCompendium:"cyberpunk-red-core.other_changelog",criticalInjuryLocation:{body:"CPR.global.location.body",head:"CPR.global.location.head"},criticalInjuryQuickFix:{firstAidParamedic:"CPR.global.criticalInjury.firstAidOrParamedic",paramedic:"CPR.global.itemType.skill.paramedic",notApplicable:"CPR.global.generic.notApplicable"},criticalInjuryTreatment:{paramedicSurgery:"CPR.global.criticalInjury.paramedicOrSurgery",quickFix:"CPR.global.criticalInjury.quickfix",surgery:"CPR.global.role.medtech.ability.surgery"},aimedLocation:{head:"CPR.global.location.head",heldItem:"CPR.global.location.heldItem",leg:"CPR.global.location.leg"},damageLocation:{brain:"CPR.global.location.brain",head:"CPR.global.location.head",heldItem:"CPR.global.location.heldItem",leg:"CPR.global.location.leg"},blackIceType:{antipersonnel:"CPR.global.blackIce.type.antiPersonnel",antiprogram:"CPR.global.blackIce.type.antiProgram",other:"CPR.global.blackIce.type.other"},blackIceStatList:{per:"CPR.global.blackIce.stats.per",spd:"CPR.global.blackIce.stats.spd",atk:"CPR.global.blackIce.stats.atk",def:"CPR.global.blackIce.stats.def",rez:"CPR.global.generic.rez"},demonStatList:{rez:"CPR.global.generic.rez",interface:"CPR.global.role.netrunner.ability.interface",netactions:"CPR.global.demon.netActions",combatNumber:"CPR.global.demon.combatNumber"},programClassList:{antipersonnelattacker:"CPR.global.programClass.antiPersonnelAttacker",antiprogramattacker:"CPR.global.programClass.antiProgramAttacker",booster:"CPR.global.programClass.booster",defender:"CPR.global.programClass.defender",blackice:"CPR.global.programClass.blackice"},interfaceAbilities:{scanner:"CPR.global.role.netrunner.interfaceAbility.scanner",backdoor:"CPR.global.role.netrunner.interfaceAbility.backdoor",cloak:"CPR.global.role.netrunner.interfaceAbility.cloak",control:"CPR.global.role.netrunner.interfaceAbility.control",eyedee:"CPR.global.role.netrunner.interfaceAbility.eyedee",pathfinder:"CPR.global.role.netrunner.interfaceAbility.pathfinder",slide:"CPR.global.role.netrunner.interfaceAbility.slide",virus:"CPR.global.role.netrunner.interfaceAbility.virus",zap:"CPR.global.role.netrunner.interfaceAbility.zap"},roleSpecialOptions:{"--":"CPR.global.generic.notApplicable",varying:"CPR.global.generic.varying"},universalBonuses:{attack:"CPR.universalBonuses.attack",damage:"CPR.universalBonuses.damage",damageReduction:"CPR.universalBonuses.damageReduction",initiative:"CPR.universalBonuses.initiative"},effectModifierModes:{1:"CPR.effectSheet.modifiers.multiply",2:"CPR.effectSheet.modifiers.addSubtract",3:"CPR.effectSheet.modifiers.lowerOf",4:"CPR.effectSheet.modifiers.higherOf",5:"CPR.effectSheet.modifiers.override"},effectUses:{always:"CPR.effectSheet.uses.always",carried:"CPR.effectSheet.uses.carried",equipped:"CPR.effectSheet.uses.equipped",installed:"CPR.effectSheet.uses.installed",rezzed:"CPR.effectSheet.uses.rezzed",snorted:"CPR.effectSheet.uses.snorted",toggled:"CPR.effectSheet.uses.toggled"},upgradableDataPoints:{upgradeConfig:{configurableTypes:{modifier:"CPR.itemSheet.itemUpgrade.modifier",override:"CPR.itemSheet.itemUpgrade.override"}},weapon:{damage:{type:"modifier",value:0,isSituational:!1,onByDefault:!1,localization:"CPR.global.generic.damage"},rof:{type:"modifier",value:0,localization:"CPR.itemSheet.weapon.rof"},attackmod:{type:"modifier",value:0,isSituational:!1,onByDefault:!1,localization:"CPR.itemSheet.weapon.attackMod"},magazine:{type:"override",value:0,localization:"CPR.itemSheet.weapon.magazine"},secondaryWeapon:{type:"item",configured:!1,localization:"CPR.itemSheet.itemUpgrade.isSecondaryWeapon"}},vehicle:{sdp:{type:"modifier",value:0,localization:"CPR.itemSheet.vehicle.sdp"},seats:{type:"modifier",value:0,localization:"CPR.itemSheet.vehicle.seats"},speedCombat:{type:"modifier",value:0,localization:"CPR.itemSheet.vehicle.combatSpeed"}},cyberware:{secondaryWeapon:{type:"item",configured:!1,localization:"CPR.itemSheet.itemUpgrade.isSecondaryWeapon"}},cyberdeck:{slots:{type:"modifier",value:0,localization:"CPR.global.generic.slots"}},armor:{bodySp:{type:"modifier",value:0,localization:"CPR.itemSheet.armor.bodyArmorSp"},headSp:{type:"modifier",value:0,localization:"CPR.itemSheet.armor.headArmorSp"},shieldHp:{type:"modifier",value:0,localization:"CPR.itemSheet.itemUpgrade.shieldHp"}},clothing:{"Wardrobe & Style":{type:"modifier",value:0,isSituational:!1,onByDefault:!1,localization:"CPR.global.itemType.skill.wardrobeAndStyle"},cool:{type:"modifier",value:0,isSituational:!1,onByDefault:!1,localization:"CPR.global.stats.cool"}}},activeEffectKeys:{combat:{"bonuses.hands":"CPR.effectSheet.combat.stats.numberOfHands","bonuses.initiative":"CPR.effectSheet.combat.stats.initiative","bonuses.maxHumanity":"CPR.effectSheet.combat.stats.maxHumanity","bonuses.maxHp":"CPR.effectSheet.combat.stats.maxHp","bonuses.deathSavePenalty":"CPR.effectSheet.combat.stats.deathPenalty","bonuses.universalAttack":"CPR.effectSheet.combat.stats.universalAttack","bonuses.universalDamage":"CPR.effectSheet.combat.stats.universalDamage","bonuses.universalDamageReduction":"CPR.effectSheet.combat.stats.universalDamageReduction","bonuses.aimedShot":"CPR.effectSheet.combat.stats.aimedShot","bonuses.singleShot":"CPR.effectSheet.combat.stats.singleShot","bonuses.melee":"CPR.effectSheet.combat.stats.melee","bonuses.ranged":"CPR.effectSheet.combat.stats.ranged","bonuses.autofire":"CPR.effectSheet.combat.stats.autofire","bonuses.suppressive":"CPR.effectSheet.combat.stats.suppressive","bonuses.run":"CPR.effectSheet.combat.stats.runSpeed","bonuses.walk":"CPR.effectSheet.combat.stats.walkSpeed"},netrun:{"bonuses.attack":"CPR.effectSheet.netrun.attack","bonuses.defense":"CPR.effectSheet.netrun.defense","bonuses.brainDamageReduction":"CPR.effectSheet.netrun.brainDamageReduction","bonuses.perception_net":"CPR.effectSheet.netrun.perception","bonuses.rez":"CPR.effectSheet.netrun.rez","bonuses.speed":"CPR.effectSheet.netrun.speed","bonuses.backdoor":"CPR.global.role.netrunner.interfaceAbility.backdoor","bonuses.cloak":"CPR.global.role.netrunner.interfaceAbility.cloak","bonuses.control":"CPR.global.role.netrunner.interfaceAbility.control","bonuses.eyedee":"CPR.global.role.netrunner.interfaceAbility.eyedee","bonuses.pathfinder":"CPR.global.role.netrunner.interfaceAbility.pathfinder","bonuses.scanner":"CPR.global.role.netrunner.interfaceAbility.scanner","bonuses.slide":"CPR.global.role.netrunner.interfaceAbility.slide","bonuses.virus":"CPR.global.role.netrunner.interfaceAbility.virus","bonuses.zap":"CPR.global.role.netrunner.interfaceAbility.zap"},role:{"bonuses.teamwork":"CPR.effectSheet.roleAbility.exec.teamwork","bonuses.operator":"CPR.effectSheet.roleAbility.fixer.operator","bonuses.backup":"CPR.effectSheet.roleAbility.lawman.backup","bonuses.credibility":"CPR.effectSheet.roleAbility.media.credibility","bonuses.medicalTechCryosystemOperation":"CPR.effectSheet.roleAbility.medtech.cryo","bonuses.medicalTechPharmaceuticals":"CPR.effectSheet.roleAbility.medtech.pharma","bonuses.medicine":"CPR.effectSheet.roleAbility.medtech.medicine","bonuses.surgery":"CPR.effectSheet.roleAbility.medtech.surgery","bonuses.interface":"CPR.effectSheet.roleAbility.netrunner.interface","bonuses.moto":"CPR.effectSheet.roleAbility.nomad.moto","bonuses.charismaticImpact":"CPR.effectSheet.roleAbility.rockerboy.charismaticImpact","bonuses.combatAwareness":"CPR.effectSheet.roleAbility.solo.combatAwareness","bonuses.damageDeflection":"CPR.effectSheet.roleAbility.solo.damageDeflection","bonuses.fumbleRecovery":"CPR.effectSheet.roleAbility.solo.fumbleRecovery","bonuses.initiativeReaction":"CPR.effectSheet.roleAbility.solo.initiativeReaction","bonuses.precisionAttack":"CPR.effectSheet.roleAbility.solo.precisionAttack","bonuses.spotWeakness":"CPR.effectSheet.roleAbility.solo.spotWeakness","bonuses.threatDetection":"CPR.effectSheet.roleAbility.solo.threatDetection","bonuses.fabricationExpertise":"CPR.effectSheet.roleAbility.tech.fabricationExpertise","bonuses.fieldExpertise":"CPR.effectSheet.roleAbility.tech.fieldExpertise","bonuses.inventionExpertise":"CPR.effectSheet.roleAbility.tech.inventionExpertise","bonuses.maker":"CPR.effectSheet.roleAbility.tech.maker","bonuses.upgradeExpertise":"CPR.effectSheet.roleAbility.tech.upgradeExpertise"},skill:{"bonuses.accounting":"CPR.global.itemType.skill.accounting","bonuses.acting":"CPR.global.itemType.skill.acting","bonuses.airVehicleTech":"CPR.global.itemType.skill.airVehicleTech","bonuses.animalHandling":"CPR.global.itemType.skill.animalHandling","bonuses.archery":"CPR.global.itemType.skill.archery","bonuses.athletics":"CPR.global.itemType.skill.athletics","bonuses.autofire":"CPR.global.itemType.skill.autofire","bonuses.basicTech":"CPR.global.itemType.skill.basicTech","bonuses.brawling":"CPR.global.itemType.skill.brawling","bonuses.bribery":"CPR.global.itemType.skill.bribery","bonuses.bureaucracy":"CPR.global.itemType.skill.bureaucracy","bonuses.business":"CPR.global.itemType.skill.business","bonuses.composition":"CPR.global.itemType.skill.composition","bonuses.concealOrRevealObject":"CPR.global.itemType.skill.concealOrRevealObject","bonuses.concentration":"CPR.global.itemType.skill.concentration","bonuses.contortionist":"CPR.global.itemType.skill.contortionist","bonuses.conversation":"CPR.global.itemType.skill.conversation","bonuses.criminology":"CPR.global.itemType.skill.criminology","bonuses.cryptography":"CPR.global.itemType.skill.cryptography","bonuses.cybertech":"CPR.global.itemType.skill.cybertech","bonuses.dance":"CPR.global.itemType.skill.dance","bonuses.deduction":"CPR.global.itemType.skill.deduction","bonuses.demolitions":"CPR.global.itemType.skill.demolitions","bonuses.driveLandVehicle":"CPR.global.itemType.skill.driveLandVehicle","bonuses.education":"CPR.global.itemType.skill.education","bonuses.electronicsAndSecurityTech":"CPR.global.itemType.skill.electronicsAndSecurityTech","bonuses.endurance":"CPR.global.itemType.skill.endurance","bonuses.evasion":"CPR.global.itemType.skill.evasion","bonuses.firstAid":"CPR.global.itemType.skill.firstAid","bonuses.forgery":"CPR.global.itemType.skill.forgery","bonuses.gamble":"CPR.global.itemType.skill.gamble","bonuses.handgun":"CPR.global.itemType.skill.handgun","bonuses.heavyWeapons":"CPR.global.itemType.skill.heavyWeapons","bonuses.humanPerception":"CPR.global.itemType.skill.humanPerception","bonuses.interrogation":"CPR.global.itemType.skill.interrogation","bonuses.landVehicleTech":"CPR.global.itemType.skill.landVehicleTech","bonuses.language":"CPR.global.itemType.skill.language","bonuses.librarySearch":"CPR.global.itemType.skill.librarySearch","bonuses.lipReading":"CPR.global.itemType.skill.lipReading","bonuses.localExpert":"CPR.global.itemType.skill.localExpert","bonuses.martialArts":"CPR.global.itemType.skill.martialArts","bonuses.meleeWeapon":"CPR.global.itemType.skill.meleeWeapon","bonuses.paintOrDrawOrSculpt":"CPR.global.itemType.skill.paintOrDrawOrSculpt","bonuses.paramedic":"CPR.global.itemType.skill.paramedic","bonuses.perception":"CPR.global.itemType.skill.perception","bonuses.perceptionHearing":"CPR.effectSheet.skill.perceptionHearing","bonuses.perceptionSight":"CPR.effectSheet.skill.perceptionSight","bonuses.personalGrooming":"CPR.global.itemType.skill.personalGrooming","bonuses.persuasion":"CPR.global.itemType.skill.persuasion","bonuses.photographyAndFilm":"CPR.global.itemType.skill.photographyAndFilm","bonuses.pickLock":"CPR.global.itemType.skill.pickLock","bonuses.pickPocket":"CPR.global.itemType.skill.pickPocket","bonuses.pilotAirVehicle":"CPR.global.itemType.skill.pilotAirVehicle","bonuses.pilotSeaVehicle":"CPR.global.itemType.skill.pilotSeaVehicle","bonuses.playInstrument":"CPR.global.itemType.skill.playInstrument","bonuses.resistTortureOrDrugs":"CPR.global.itemType.skill.resistTortureOrDrugs","bonuses.riding":"CPR.global.itemType.skill.riding","bonuses.science":"CPR.global.itemType.skill.science","bonuses.seaVehicleTech":"CPR.global.itemType.skill.seaVehicleTech","bonuses.shoulderArms":"CPR.global.itemType.skill.shoulderArms","bonuses.stealth":"CPR.global.itemType.skill.stealth","bonuses.streetWise":"CPR.global.itemType.skill.streetwise","bonuses.tactics":"CPR.global.itemType.skill.tactics","bonuses.tracking":"CPR.global.itemType.skill.tracking","bonuses.trading":"CPR.global.itemType.skill.trading","bonuses.wardrobeAndStyle":"CPR.global.itemType.skill.wardrobeAndStyle","bonuses.weaponstech":"CPR.global.itemType.skill.weaponstech","bonuses.wildernessSurvival":"CPR.global.itemType.skill.wildernessSurvival"},stat:{"system.stats.int.value":"CPR.global.stats.int","system.stats.ref.value":"CPR.global.stats.ref","system.stats.dex.value":"CPR.global.stats.dex","system.stats.tech.value":"CPR.global.stats.tech","system.stats.cool.value":"CPR.global.stats.cool","system.stats.will.value":"CPR.global.stats.will","system.stats.luck.max":"CPR.global.stats.luckMax","system.stats.move.value":"CPR.global.stats.move","system.stats.body.value":"CPR.global.stats.body","system.stats.emp.max":"CPR.global.stats.empMax"},misc:{"bonuses.allActions":"CPR.effectSheet.misc.allActions","bonuses.allActionsHands":"CPR.effectSheet.misc.allActionsHands","bonuses.allActionsSpeech":"CPR.effectSheet.misc.allActionsSpeech"}},defaultSituationalMods:{complimentarySkill:{value:1,source:"CPR.rolls.defaultMods.complimentarySkill",id:"complimentarySkill-coreBook"},extraTime:{value:1,source:"CPR.rolls.defaultMods.extraTime",id:"extraTime-coreBook"},lowLight:{value:-1,source:"CPR.rolls.defaultMods.lowLight",id:"lowLight-coreBook"},firstTime:{value:-1,source:"CPR.rolls.defaultMods.firstTime",id:"firstTime-coreBook"},complexTask:{value:-2,source:"CPR.rolls.defaultMods.complexTask",id:"complexTask-coreBook"},wrongTools:{value:-2,source:"CPR.rolls.defaultMods.wrongTools",id:"wrongTools-coreBook"},badSleep:{value:-2,source:"CPR.rolls.defaultMods.badSleep",id:"badSleep-coreBook"},extremeStress:{value:-2,source:"CPR.rolls.defaultMods.extremeStress",id:"extremeStress-coreBook"},exhausted:{value:-4,source:"CPR.rolls.defaultMods.exhausted",id:"exhausted-coreBook"},drunkSedated:{value:-4,source:"CPR.rolls.defaultMods.drunkSedated",id:"drunkSedated-coreBook"},sneakily:{value:-4,source:"CPR.rolls.defaultMods.sneakily",id:"sneakily-coreBook"},heavilyObscured:{value:-4,source:"CPR.rolls.defaultMods.heavilyObscured",id:"heavilyObscured-coreBook"}},themes:{default:"CPR.settings.theme.name.default",darkmode:"CPR.settings.theme.name.darkmode"}};class CPRMod{constructor(e,t){LOGGER.trace("constructor | CPRMod | Called.");const a=e.changes.indexOf(t);this.category=e.flags[game.system.id].changes.cats?.[a],this.isSituational=e.flags[game.system.id].changes.situational?.[a].isSituational,this.onByDefault=e.flags[game.system.id].changes.situational?.[a].onByDefault,this.id=`${t.key}-${e.id}`,this.source=e.name,this.value=Number.parseInt(t.value,10),this.key=t.key,this.changeMode=t.mode}static getAllModifiers(e,t=!1){LOGGER.trace("getAllModifiers | CPRMod | Called.");const a=[];return e.forEach((e=>{(!e.system.isSuppressed&&!e.disabled||t)&&e.changes.forEach(((t,l)=>{const i=new CPRMod(e,t,l);a.push(i)}))})),a}static getRelevantMods(e,t){LOGGER.trace("getRelevantMods | CPRMod | Called.");let a=[];return a=Array.isArray(t)?e.filter((e=>{const a=e.key.replace("bonuses.","");return t.includes(a)})):e.filter((e=>e.key===`bonuses.${t}`)),a}static getSituationalRollMods(e,t,a,l){LOGGER.trace("getSituationalRollMods | CPRMod | Called.");const i=CPRSystemUtils.getPrototypeChain(e),s=CPRMod.getAllModifiers(t).filter((e=>e.isSituational));let o=[];if(!i.includes("CPRDeathSaveRoll")&&!i.includes("CPRDamageRoll")&&!i.includes("CPRInitiativeRoll")){const e=s.filter((e=>["bonuses.allActions","bonuses.allActionsSpeech","bonuses.allActionsHands"].includes(e.key)));o=o.concat(e)}if((i.includes("CPRSkillRoll")||i.includes("CPRRoleRoll"))&&!i.includes("CPRInterfaceRoll")){const t=s.filter((t=>[`bonuses.${CPRSystemUtils.slugify(e.skillName)}`,`bonuses.${CPRSystemUtils.slugify(e.skillName)}Hearing`,`bonuses.${CPRSystemUtils.slugify(e.skillName)}Sight`].includes(t.key)));o=o.concat(t);let a=[];l.itemTypes.role.forEach((t=>{a=a.concat(t.getRoleMods(e.skillName))})),a=a.filter((e=>e.isSituational)),o=o.concat(a)}if(i.includes("CPRInitiative")){const e=s.filter((e=>"bonuses.initiative"===e.key));o=o.concat(e);let t=[];l.itemTypes.role.forEach((e=>{t=t.concat(e.getRoleMods("initiative",!0))})),t=t.filter((e=>e.isSituational)),o=o.concat(t)}if(i.includes("CPRAttackRoll")){const e=["bonuses.universalAttack"];a.system.isRanged?e.push("bonuses.ranged"):e.push("bonuses.melee"),"CPRAttackRoll"===i[0]?e.push("bonuses.singleShot"):i.includes("CPRAimedAttackRoll")?(e.push("bonuses.singleShot"),e.push("bonuses.aimedShot")):i.includes("CPRAutofireRoll")?e.push("bonuses.autofire"):i.includes("CPRSuppressiveFireRoll")&&e.push("bonuses.suppressive");const t=s.filter((t=>e.includes(t.key))),r=a.getAllUpgradeMods("attackmod").filter((e=>e.isSituational));o=o.concat(t).concat(r);let n=[];l.itemTypes.role.forEach((e=>{n=n.concat(e.getRoleMods("attack",!0))})),n=n.filter((e=>e.isSituational)),o=o.concat(n)}if(i.includes("CPRDamageRoll")){const e=s.filter((e=>"bonuses.universalDamage"===e.key));if(a){const t=a.getAllUpgradeMods("damage").filter((e=>e.isSituational));o=o.concat(e).concat(t)}let t=[];l.itemTypes.role.forEach((e=>{t=t.concat(e.getRoleMods("damage",!0))})),t=t.filter((e=>e.isSituational)),o=o.concat(t)}if(i.includes("CPRRoleRoll")){const t=s.filter((t=>t.key===`bonuses.${CPRSystemUtils.slugify(e.roleName)}`));o=o.concat(t)}if(i.includes("CPRInterfaceRoll")){let t=s.filter((t=>t.key===`bonuses.${e.ability}`));"zap"===e.ability&&(t=t.concat(s.filter((e=>"bonuses.attack"===e.key||"bonuses.universalAttack"===e.key)))),"attack"===e.ability&&(t=t.concat(s.filter((e=>"bonuses.universalAttack"===e.key)))),o=o.concat(t)}if(i.includes("CPRDeathSaveRoll")){const e=s.filter((e=>"bonuses.deathSavePenalty"===e.key));o=o.concat(e)}return o}static getDefaultSituationalMods(){return LOGGER.trace("getDefaultSituationalMods | CPRMod | Called."),Object.values(g.defaultSituationalMods)}}class CPRDialog extends FormApplication{constructor(e,t){LOGGER.trace("constructor | CPRDialog | Called."),super(e,t),this.options.overwriteButtons&&(this.options.buttons=t.buttons),this.objectData=e.object}static get defaultOptions(){return LOGGER.trace("defaultOptions | CPRDialog | called."),mergeObject(super.defaultOptions,{template:`systems/${game.system.id}/templates/dialog/cpr-default-prompt.hbs`,title:"CPR.global.generic.title",width:400,height:"auto",resizable:!0,closeOnSubmit:!1,submitOnChange:!0,submitOnClose:!1,buttons:{confirm:{icon:"fas fa-check",label:CPRSystemUtils.Localize("CPR.dialog.common.confirm"),callback:e=>e.confirmDialog()},cancel:{icon:"fas fa-times",label:CPRSystemUtils.Localize("CPR.dialog.common.cancel"),callback:e=>e.closeDialog()}},buttonDefault:"confirm",overwriteButtons:!1})}getData(){LOGGER.trace("getData | CPRDialog | called.");const e=super.getData();return Object.entries(this.object).forEach((([t,a])=>{e[t]=a})),e}activateListeners(e){LOGGER.trace("activateListeners | CPRDialog | Called."),super.activateListeners(e),this.options.editable&&($("input[type=text]").focusin((()=>$(this).select())),$("input[type=number]").focusin((()=>$(this).select())),e.find(".item-checkbox").click((e=>this._itemCheckboxToggle(e))),e.find(".cpr-dialog-button").click((e=>{const t=e.currentTarget.name;this.options.buttons[t].callback(this)})),this.element.find(".header-button.close").click((e=>this.closeDialog(e))))}_itemCheckboxToggle(e){LOGGER.trace("_itemCheckboxToggle | CPRDialog | Called.");const t=this.object,a=CPRSystemUtils.GetEventDatum(e,"data-target"),l=!getProperty(t,a);hasProperty(t,a)?setProperty(t,a,l):LOGGER.error(`The target (${a}) does not exist in the dialogData.`,t),this.render()}async confirmDialog(e,t){return LOGGER.trace("confirmDialog | CPRDialog | Called."),this.options.confirmDialog(),this.close(t)}async closeDialog(e,t){return LOGGER.trace("closeDialog | CPRDialog | Called."),this.options.closeDialog(),this.close(t)}static async showDialog(...e){return LOGGER.trace("showDialog | CPRDialog | Called."),new Promise(((t,a)=>{const l=new this(...e);l.options.confirmDialog=()=>t(e[0]),l.options.closeDialog=()=>a(e[0]),l.render(!0)}))}async _updateObject(e,t){LOGGER.trace("_updateObject | CPRDialog | Called.");const a=duplicate(t);mergeObject(this.object,a),this.render(!0)}}class CPRRollDialog extends CPRDialog{constructor(e,t,a,l){LOGGER.trace("constructor | CPRRollDialog | Called."),super(e,l),this.options.title=e.rollTitle,this.rollData=e,this.prototypeChain=CPRSystemUtils.getPrototypeChain(e),this.options.template=e.rollPrompt,this.actor=t,this.item=a,this.defaultSituationalMods=CPRMod.getDefaultSituationalMods(),this.showSituationalMods=!0,this.showDefaultMods=!1}getData(){LOGGER.trace("getData | CPRRollDialog | called.");const e=super.getData();e.rollData=this.rollData,e.actor=this.actor,e.prototypeChain=this.prototypeChain,this.prototypeChain.includes("CPRDeathSaveRoll")||(e.defaultSituationalMods=this.defaultSituationalMods),e.showDefaultMods=this.showDefaultMods,e.showSituationalMods=this.showSituationalMods,e.filteredMods=CPRMod.getSituationalRollMods(this.rollData,Array.from(this.actor.allApplicableEffects()),this.item,this.actor),this.filteredMods=e.filteredMods;let t=0;return this.rollData.mods.forEach((e=>{t+=parseInt(e.value,10)})),this.rollData.additionalMods.forEach((e=>{t+=parseInt(e,10)})),e.totalMods=t,e}activateListeners(e){LOGGER.trace("activateListeners | CPRRollDialog | Called."),super.activateListeners(e),this.options.editable&&(e.find(".toggle-situational-mod").click((e=>this._toggleSituationalMod(e))),e.find(".aimed-checkbox").click((()=>this._aimedToggle())),e.find(".toggle-show-mods").click((e=>this._toggleModsVisibility(e))))}_aimedToggle(){LOGGER.trace("_aimedToggle | CPRRollDialog | Called."),this.rollData.isAimed?this.rollData.location="body":this.rollData.location="head"}_toggleSituationalMod(e){LOGGER.trace("_toggleSituationalMod | CPRRollDialog | Called.");const t=CPRSystemUtils.GetEventDatum(e,"data-mod-id"),a=this.filteredMods.find((e=>e.id===t))||this.defaultSituationalMods.find((e=>e.id===t));this.rollData.mods.some((e=>e.id===t))?this.rollData.removeMod(t):this.rollData.addMod([a]),this.render()}_toggleModsVisibility(e){LOGGER.trace("_toggleModsVisibility | CPRRollDialog | Called.");"situational-mods"===CPRSystemUtils.GetEventDatum(e,"data-target")?this.showSituationalMods=!this.showSituationalMods:this.showDefaultMods=!this.showDefaultMods,this.render()}async _updateObject(e,t){LOGGER.trace("_updateObject | CPRDialog | Called.");const a=duplicate(t);t.additionalMods?(a.additionalMods=a.additionalMods.replace(/ +/g,","),a.additionalMods=a.additionalMods.replace(/,+/g,","),a.additionalMods=a.additionalMods.split(","),a.additionalMods.some((e=>isNaN(e)))&&CPRSystemUtils.DisplayMessage("warn","CPR.rolls.modifiers.additionalModWarning"),a.additionalMods.forEach(((e,t)=>{isNaN(e)&&a.additionalMods.splice(t,1)})),a.additionalMods=a.additionalMods.map(Number)):a.additionalMods=[],super._updateObject(e,a)}}class CPRRoleRollDialog extends CPRRollDialog{getData(){LOGGER.trace("getData | CPRRoleRollDialog | called.");const e=super.getData();if(("varying"===this.item.system.skill||"varying"===this.item.system.abilities.find((e=>e.name===this.rollData.roleName))?.skill)&&(e.isVarying=!0,"varying"===this.rollData.skillName)){const t=this.rollData.skillList.sort(((e,t)=>e.name>t.name?1:-1))[0];e.rollData.skillName=t.name,e.rollData.skillValue=t.system.level,e.rollData.statName=t.system.stat,e.rollData.statValue=this.actor.getStat(this.rollData.statName)}return e}activateListeners(e){LOGGER.trace("activateListeners | CPRRollRoleDialog | Called."),super.activateListeners(e),e.find(".skill-list-select").change((e=>this._updateSkillValue(e)))}_updateSkillValue(e){LOGGER.trace("_updateSkillValue | CPRRoleRollDialog | called.");const t=this.rollData.skillList.find((t=>t.name===e.currentTarget.value));this.rollData.skillValue=t.system.level,this.rollData.statName=t.system.stat,this.rollData.statValue=this.actor.getStat(this.rollData.statName);const a=Array.from(this.actor.allApplicableEffects()),l=CPRMod.getAllModifiers(a),i=CPRMod.getRelevantMods(l,[CPRSystemUtils.slugify(e.currentTarget.value),`${CPRSystemUtils.slugify(e.currentTarget.value)}Hearing`,`${CPRSystemUtils.slugify(e.currentTarget.value)}Sight`]),s=CPRMod.getRelevantMods(l,[CPRSystemUtils.slugify(this.rollData.skillName),`${CPRSystemUtils.slugify(this.rollData.skillName)}Hearing`,`${CPRSystemUtils.slugify(this.rollData.skillName)}Sight`]);i&&i.forEach((e=>{e.isSituational?e.isSituational&&e.onByDefault?(this.rollData.addMod([e]),this.filteredMods.push(e)):this.filteredMods.push(e):this.rollData.addMod([e])})),s&&s.forEach((e=>{if(this.rollData.mods.some((t=>e.id===t.id))&&this.rollData.removeMod(e.id),this.filteredMods.some((t=>e.id===t.id))){const t=this.filteredMods.findIndex((t=>e.id===t.id));this.filteredMods.splice(t,1)}}))}}class CPRRoll{constructor(e,t){LOGGER.trace("constructor | CPRRoll | Called."),this._roll=null,this._critRoll=null,this.mods=[],this.additionalMods=[],this.rollTitle=e||this.template,this.die=null,this.formula=this._processFormula(t),this.faces=[],this.initialRoll=0,this.luck=0,this.calculateCritical=!0,this.criticalRoll=0,this.resultTotal=0,this.rollPrompt=`systems/${game.system.id}/templates/dialog/rolls/cpr-base-verify-roll-prompt.hbs`,this.rollCard=`systems/${game.system.id}/templates/chat/cpr-base-rollcard.hbs`,this.rollCardExtraArgs=[]}_processFormula(e){if(LOGGER.trace("_processFormula | CPRRoll | Called."),!Number.isNaN(+e))return e;const t=/[0-9][0-9]*d[0-9][0-9]*/;let a=e.replace(t,"");if(""!==a){a=a.replace("+"," +"),a=a.replace("-"," -");a.split(" ").forEach((e=>{""!==e&&this.addMod([{value:Number(e),source:CPRSystemUtils.Localize("CPR.rolls.modifiers.sources.rollFormula")}])}))}return[this.die]=e.match(/d[0-9][0-9]*/),e.match(t)[0]}addMod(e){LOGGER.trace("addMod | CPRRoll | Called."),Array.isArray(e)?e.forEach((e=>{e&&0!==e.value&&this.mods.push(e)})):LOGGER.error("Arg for addMod must be an Array of CPRMod-like objects. See argument:",e)}removeMod(e){LOGGER.trace("removeMod | CPRRoll | Called.");const t=this.mods.findIndex((t=>t.id===e));this.mods.splice(t,1)}totalMods(){LOGGER.trace("totalMods | CPRRoll | Called.");let e=0;return this.mods.forEach((t=>{e+=t.value})),this.additionalMods.forEach((t=>{const a=t?Number.parseInt(t,10):0;e+=a})),this.mods.length>0||this.additionalMods.length>0?e:0}async roll(){LOGGER.trace("roll | CPRRoll | Called."),this._roll=await new Roll(this.formula).evaluate(),this instanceof CPRInitiative||await DiceSoNice.ShowDiceSoNice(this._roll),this.initialRoll=this._roll.total,this.resultTotal=this.initialRoll+this.totalMods(),this._roll.terms[0].formula!==String(this._roll.terms[0].total)?this.faces=this._roll.terms[0].results.map((e=>e.result)):this.faces=[],this.wasCritical()&&this.calculateCritical&&(this._critRoll=await new Roll(this.formula).evaluate(),this instanceof CPRInitiative||await DiceSoNice.ShowDiceSoNice(this._critRoll),this.criticalRoll=this._critRoll.total),this._computeResult()}_computeBase(){return LOGGER.trace("_computeBase | CPRRoll | Called."),this.initialRoll+this.totalMods()+this.luck}_computeResult(){LOGGER.trace("_computeResult | CPRRoll | Called."),this.resultTotal=this._computeBase(),this.wasCritFail()?this.resultTotal+=-1*this.criticalRoll:this.resultTotal+=this.criticalRoll}wasCritical(){return LOGGER.trace("wasCritical | CPRRoll | Called."),this.wasCritFail()||this.wasCritSuccess()}wasCritFail(){return LOGGER.trace("wasCritFail | CPRRoll | Called."),1===this.initialRoll}wasCritSuccess(){return LOGGER.trace("wasCritSuccess | CPRRoll | Called."),this.initialRoll===this._roll.terms[0].faces}async handleRollDialog(e,t,a){LOGGER.trace("handleRollDialog | CPRRoll | Called.");let l=e.ctrlKey||e.metaKey;if("click"===e.type){l=game.settings.get(game.system.id,"invertRollCtrlFunction")?!l:l}if(!l){let e;if(this.constructor===CPRRoleRoll)e=CPRRoleRollDialog;else e=CPRRollDialog;const l=await e.showDialog(this,t,a).catch((e=>LOGGER.debug(e)));if(void 0===l)return!1;mergeObject(this,l,{overwrite:!0})}return!0}}class CPRInitiative extends CPRRoll{constructor(e,t,a,l){LOGGER.trace("constructor | CPRStatRoll | Called.");t.match(/d[0-9][0-9]*/)?super(CPRSystemUtils.Localize("CPR.chat.initiative"),t):(super(CPRSystemUtils.Localize("CPR.chat.initiative"),"1d10"),this.formula=t),this.combatant=e,this.statName=a,this.statValue=l,this.rollCard=`systems/${game.system.id}/templates/chat/cpr-initiative-rollcard.hbs`,this.calculateCritical=game.settings.get(game.system.id,"criticalInitiative")}_computeBase(){return LOGGER.trace("_computeBase | CPRStatRoll | Called."),this.initialRoll+this.totalMods()+this.statValue+this.luck}}class CPRRoleRoll extends CPRRoll{constructor(e,t,a,l,i,s,o){LOGGER.trace("constructor | CPRRoleRoll | Called."),super(e,"1d10"),this.skillList=o,this.roleName=e,this.roleValue=t,this.skillName=a,this.skillValue=l,this.statName=i,this.statValue=s,this.rollPrompt=`systems/${game.system.id}/templates/dialog/rolls/cpr-verify-roll-roleAbility-prompt.hbs`,this.rollCard=`systems/${game.system.id}/templates/chat/cpr-role-rollcard.hbs`}_computeBase(){return LOGGER.trace("_computeBase | CPRRoleRoll | Called."),this.initialRoll+this.totalMods()+this.roleValue+this.skillValue+this.statValue+this.luck}}class CPRDamageRoll extends CPRRoll{constructor(e,t,a){LOGGER.trace("constructor | CPRDamageRoll | Called."),super(e,t),this.rollPrompt=`systems/${game.system.id}/templates/dialog/rolls/cpr-verify-roll-damage-prompt.hbs`,this.rollCard=`systems/${game.system.id}/templates/chat/cpr-damage-rollcard.hbs`,this.calculateCritical=!1,this.bonusDamage=5,this.isAimed=!1,this.location="body",this.weaponType=a,this.isAutofire=!1,this.autofireMultiplier=0,this.autofireMultiplierMax=0}_computeBase(){LOGGER.trace("_computeBase | CPRDamageRoll | Called."),this.autofireMultiplier=Math.min(this.autofireMultiplier,this.autofireMultiplierMax);const e=this.isAutofire?this.autofireMultiplier:1;return(this.initialRoll+this.totalMods())*e}wasCritFail(){return LOGGER.trace("wasCritFail | CPRDamageRoll | Called."),!1}wasCritSuccess(){return LOGGER.trace("wasCritSuccess | CPRDamageRoll | Called."),this.faces.filter((e=>6===e)).length>=2}_computeResult(){LOGGER.trace("_computeResult | CPRDamageRoll | Called."),this.resultTotal=this._computeBase()}setAutofire(){LOGGER.trace("setAutofire | CPRDamageRoll | Called."),this.isAutofire=!0,this.formula="2d6",this.mods=[]}configureAutofire(e,t=0,a){if(LOGGER.trace("configureAutofire | CPRDamageRoll | Called."),this.autofireMultiplier=e,"set"===a?.mode)this.autofireMultiplierMax=a.value;else if("modify"===a?.mode){const e=Math.max(t+a.value,a.minimum);this.autofireMultiplierMax=e}else t>this.autofireMultiplierMax&&(this.autofireMultiplierMax=t)}setNetCombat(e){LOGGER.trace("setNetCombat | CPRDamageRoll | Called."),this.rollTitle=e,this.rollPrompt=`systems/${game.system.id}/templates/dialog/rolls/cpr-verify-program-damage-prompt.hbs`,this.rollCard=`systems/${game.system.id}/templates/chat/cpr-program-damage-rollcard.hbs`}}class CPRChat{static ChatDataSetup(e,t,a,l=!1){LOGGER.trace("ChatDataSetup | CPRChat | Called.");const i={user:game.user.id,rollMode:t||game.settings.get("core","rollMode"),content:e};return l&&(i.sound=CONFIG.sounds.dice),["gmroll","blindroll"].includes(i.rollMode)&&(i.whisper=ChatMessage.getWhisperRecipients("GM").map((e=>e.id))),"blindroll"===i.rollMode?i.blind=!0:"selfroll"===i.rollMode&&(i.whisper=[game.user]),a&&(i.speaker=ChatMessage.getSpeaker(),i.whisper=ChatMessage.getWhisperRecipients(a)),i}static RenderRollCard(e){LOGGER.trace("RenderRollCard | CPRChat | Called.");const t=e;return t.criticalCard=t.wasCritical(),t instanceof CPRInitiative&&!t.calculateCritical&&(t.criticalCard=!1),renderTemplate(t.rollCard,t).then((e=>{const a=this.ChatDataSetup(e);if(void 0!==t.entityData&&null!==t.entityData){let e;const l=t.entityData.actor,i=t.entityData.token;i?e=Object.keys(game.actors.tokens).includes(i)?game.actors.tokens[i]:game.actors.find((e=>e.id===l)):[e]=game.actors.filter((e=>e.id===l));const s=e.name;a.speaker={actor:e,alias:s}}return ChatMessage.create(a,!1)}))}static RenderItemCard(e){LOGGER.trace("RenderItemCard | CPRChat | Called.");const t=e,a=`systems/${game.system.id}/templates/item/cpr-item-roll-card.hbs`;t.trimName=e.name,(null===t.name||t.trimName.length>16)&&(t.trimName=`${t.trimName.slice(0,15)}…`);return t.trimDesc=e.system.description.value,null===t.trimDesc||0===t.trimDesc.length?t.trimDesc="(No description)":t.trimDesc.length>5e3&&(t.trimDesc=`${t.trimDesc.slice(0,4999)}…`),renderTemplate(a,t).then((t=>{const a=this.ChatDataSetup(t);if(void 0!==e.entityData&&null!==e.entityData){const t=game.actors.filter((t=>t.id===e.entityData.actor))[0];let l=t.name;if(null!==e.entityData.token){const t=game.actors.tokens[e.entityData.token];void 0!==t&&(l=t.name)}a.speaker={actor:t,alias:l}}return ChatMessage.create(a,!1)}))}static RenderDamageApplicationCard(e){LOGGER.trace("RenderDamageApplicationCard | CPRChat | Called.");const t=`systems/${game.system.id}/templates/chat/cpr-damage-application-card.hbs`;return renderTemplate(t,e).then((t=>{const a=this.ChatDataSetup(t);if(void 0!==e.entityData&&null!==e.entityData){let t;const l=e.entityData.actor,i=e.entityData.token;i?t=Object.keys(game.actors.tokens).includes(i)?game.actors.tokens[i]:game.actors.find((e=>e.id===l)):[t]=game.actors.filter((e=>e.id===l));const s=t.name;a.speaker={actor:t,alias:s}}return ChatMessage.create(a,!1)}))}static async HandleCPRCommand(e){LOGGER.trace("HandleCPRCommand | CPRChat | Called.");const t=/[+-][0-9][0-9]*/,a=/[0-9][0-9]*d[0-9][0-9]*/,l=/a[0-9][0-9]*/;let i="1d10",s="";if(e.includes("#")&&(s=e.slice(e.indexOf("#")+1)),e.match(a)&&([i]=e.match(a)),e.match(t)){i=`${i}${e.match(t)}`}if(i){let t;if(i.includes("d6")){let a=1;e.match(l)&&([a]=e.match(l),a=a.slice(1)),t=new CPRDamageRoll(CPRSystemUtils.Localize("CPR.rolls.roll"),i),t.rollCardExtraArgs.ablationValue=a}else t=new CPRRoll(CPRSystemUtils.Localize("CPR.rolls.roll"),i);""!==s&&(t.rollCardExtraArgs.rollDescription=s),"d6"!==t.die&&"d10"!==t.die&&(t.calculateCritical=!1,t.die="generic"),await t.roll(),this.RenderRollCard(t)}}static async chatListeners(e){LOGGER.trace("chatListeners | CPRChat | Called."),e.on("click",".clickable",(async t=>{const a=CPRSystemUtils.GetEventDatum(t,"data-action");switch(a){case"toggleVisibility":{const a=CPRSystemUtils.GetEventDatum(t,"data-visible-element");$(e).find(`.${a}`).toggleClass("hide");break}case"rollDamage":{const e=CPRSystemUtils.GetEventDatum(t,"data-actor-id"),a=CPRSystemUtils.GetEventDatum(t,"data-item-id"),l=CPRSystemUtils.GetEventDatum(t,"data-token-id"),i=CPRSystemUtils.GetEventDatum(t,"data-damage-location"),s=CPRSystemUtils.GetEventDatum(t,"data-attack-type"),o=Object.keys(game.actors.tokens).includes(l)?game.actors.tokens[l]:game.actors.find((t=>t.id===e)),r=o?o.items.find((e=>e.id===a)):null,n=null===o?"ERROR":o.name;if(!r)return void CPRSystemUtils.DisplayMessage("warn",`[${n}] ${CPRSystemUtils.Localize("CPR.actormissingitem")} ${a}`);let c,m="cyberdeck"!==r.type?"damage":"cyberdeckProgram";if("cyberdeck"!==r.type)c=r.createRoll(m,o,{damageType:s});else{const e=CPRSystemUtils.GetEventDatum(t,"data-program-id"),l=o.getOwnedItem(e);if("zap"!==e&&"object"==typeof l&&!l.system?.damage.standard&&!l.system?.damage.blackIce)return void CPRSystemUtils.DisplayMessage("warn",CPRSystemUtils.Localize("CPR.chat.rollDamage.warningProgramDmg"));m="zap"===e?"interfaceAbility":m;const i=o.itemTypes.role.find((e=>e.id===o.system.roleInfo.activeNetRole));c=r.createRoll(m,o,{cyberdeckId:a,interfaceAbility:"zap",programUUID:e,executionType:"damage",netRoleItem:i})}i&&(c.location=i);const d=CPRSystemUtils.getUserTargetedOrSelected("targeted");0===d.length&&CPRSystemUtils.DisplayMessage("warn","CPR.chat.damageApplication.noTokenTargeted");if(!await c.handleRollDialog(t,o,r))return;c=await r.confirmRoll(c),await c.roll(),c.entityData={actor:e,token:l,item:a,tokens:d},CPRChat.RenderRollCard(c);break}case"itemEdit":{const e=CPRSystemUtils.GetEventDatum(t,"data-item-id"),a=CPRSystemUtils.GetEventDatum(t,"data-actor-id"),l=CPRSystemUtils.GetEventDatum(t,"data-token-id");(Object.keys(game.actors.tokens).includes(l)?game.actors.tokens[l]:game.actors.find((e=>e.id===a))).items.find((t=>t._id===e)).sheet.render(!0,{editable:!1});break}case"applyDamage":this.damageApplication(t);break;case"reverseDamage":{const e=CPRSystemUtils.GetEventDatum(t,"data-actor-id"),a=CPRSystemUtils.GetEventDatum(t,"data-token-id"),l=parseInt(CPRSystemUtils.GetEventDatum(t,"data-hp-reduction"),10),i=CPRSystemUtils.GetEventDatum(t,"data-location"),s=parseInt(CPRSystemUtils.GetEventDatum(t,"data-ablation"),10),o=parseInt(CPRSystemUtils.GetEventDatum(t,"data-shield-ablation"),10);(Object.keys(game.actors.tokens).includes(a)?game.actors.tokens[a]:game.actors.find((t=>t.id===e)))._reverseDamage(l,i,s,o);break}default:LOGGER.warn(`No action defined for ${a}`)}}))}static addMessageTags(e,t){LOGGER.trace("addMessageTags | CPRChat | Called.");const a=e.find(".message-timestamp"),l=t.message.whisper,i=t.message.blind||!1,s=l?.length>0||!1,o=s&&1===l.length&&l[0]===t.message.user,r=$("<span>");r.addClass("chat-mode-indicator"),i?(r.text(CPRSystemUtils.Localize("CPR.chat.blind")),a.before(r)):o?(r.text(CPRSystemUtils.Localize("CPR.chat.self")),a.before(r)):s&&(r.text(CPRSystemUtils.Localize("CPR.chat.whisper")),a.before(r))}static async damageApplication(e){LOGGER.trace("damageApplication | CPRChat | Called.");const t=CPRSystemUtils.isNumeric(parseInt(CPRSystemUtils.GetEventDatum(e,"data-total-damage"),10))?parseInt(CPRSystemUtils.GetEventDatum(e,"data-total-damage"),10):0,a=CPRSystemUtils.isNumeric(parseInt(CPRSystemUtils.GetEventDatum(e,"data-bonus-damage"),10))?parseInt(CPRSystemUtils.GetEventDatum(e,"data-bonus-damage"),10):0,l=/true/i.test(CPRSystemUtils.GetEventDatum(e,"data-damage-lethal")),i=CPRSystemUtils.GetEventDatum(e,"data-ammo-variety");let s=CPRSystemUtils.GetEventDatum(e,"data-damage-location");"head"!==s&&"brain"!==s&&(s="body");const o=CPRSystemUtils.isNumeric(parseInt(CPRSystemUtils.GetEventDatum(e,"data-ablation"),10))?parseInt(CPRSystemUtils.GetEventDatum(e,"data-ablation"),10):0,r=/true/i.test(CPRSystemUtils.GetEventDatum(e,"data-ignore-half-armor")),n="brain"===s,c=`${CPRSystemUtils.Format("CPR.chat.damageApplication.prompt.allowedTypes",{location:s})}`,m=CPRSystemUtils.GetEventDatum(e,"data-scope"),d={title:CPRSystemUtils.Localize("CPR.chat.damageApplication.prompt.title"),template:`systems/${game.system.id}/templates/dialog/cpr-damage-application-prompt.hbs`};let g={damageReductionRole:!0,damageReductionAE:!0,useShield:!0,brainDamageReduction:!0,allowedTypesMessage:c,allowedActors:[],showBrainDamageReduction:n};if("local"===m){const n=CPRSystemUtils.GetEventDatum(e,"data-actor-id"),c=CPRSystemUtils.GetEventDatum(e,"data-token-id"),m=Object.keys(game.actors.tokens).includes(c)?game.actors.tokens[c]:game.actors.find((e=>e.id===n));if(g.allowedActors.push(m),e.ctrlKey||(g=await CPRDialog.showDialog(g,d).catch((e=>LOGGER.debug(e)))),!g)return;m._applyDamage(t,a,s,o,i,r,l,g)}else{const n=CPRSystemUtils.getUserTargetedOrSelected("selected");if(0===n.length)return void CPRSystemUtils.DisplayMessage("warn","CPR.chat.damageApplication.noTokenSelected");const c=["character","mook","demon","blackIce"],m=[],u=[];n.forEach((e=>{const{actor:t}=e;c.includes(t.type)?m.push(t):u.push(t)})),m.sort(((e,t)=>e.name>t.name?1:-1)),u.sort(((e,t)=>e.name>t.name?1:-1));let p=0;for(;p<m.length;){if(!g)return;e.ctrlKey||(g.count=p,g.allowedActors=m,g.forbiddenActors=u,g=await CPRDialog.showDialog(g,d).catch((e=>LOGGER.debug(e)))),g&&m[p]._applyDamage(t,a,s,o,i,r,l,g),p+=1}}}}let u=null;function register(t){game.settings.register(e.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{u=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const[a,l]=t.split("|");if(["item"].includes(a)&&this.isRenderItem())return this.doRenderItem(this.actor,l);const i=["character"];if(this.actor)return void await this.#m(e,this.actor,this.token,a,l,t);const s=canvas.tokens.controlled.filter((e=>i.includes(e.actor?.type)));for(const t of s){const i=t.actor;await this.#m(e,i,t,a,l)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#m(e,t,a,l,i,s){let o=null,c=null;if("item"===l)switch(c=t.getOwnedItem(i),c.type){case r.SKILL:o=c.createRoll(n.SKILL,t);break;case r.CYBERWARE:case r.WEAPON:o=c.createRoll(n.ATTACK,t)}if("role"===l&&s&&t.system.externalData.secretItems.size){const e=s.replace("role|","");c=t.system.externalData.secretItems.get(e),o=c.createRoll(n.ROLEABILITY,t,{rollSubType:c.rollSubType,subRoleName:c.subRoleName})}switch(l){case r.STAT:case n.DEATHSAVE:case n.FACEDOWN:["character","mook"].includes(t.type)&&(o=t.createRoll(l,i)),["blackIce","demon"].includes(t.type)&&(o=t.createStatRoll(i));break;case n.INTERFACEABILITY:const e=Array.from(t.items).find((e=>"cyberdeck"===e.type&&"equipped"===e.system.equipped)),s=t.itemTypes.role.find((e=>e.id===t.system.roleInfo.activeNetRole));o=e.createRoll("interfaceAbility",t,{interfaceAbility:i,cyberdeck:e,netRoleItem:s});break;case n.NET:const c=t.token.flags["cyberpunk-red-core"].programUUID,m=void 0,d=a.scene.uuid;o=t.createDamageRoll(c,m,d)}if(!o)return;if(!await o.handleRollDialog(e,t,c))return;if(null!==c&&(o=await c.confirmRoll(o)),await o.roll(),"Death Save"===o.rollTitle&&(o.saveResult=this.actor.processDeathSave(o)),Number.isInteger(o.luck)&&o.luck>0){const e=t.system.stats.luck.value;t.update({"system.stats.luck.value":e-(o.luck>e?e:o.luck)})}a=null===a?null:a.data._id;const m=CPRSystemUtils.getUserTargetedOrSelected("targeted");o.entityData={actor:t.id,token:a,tokens:m},c&&(o.entityData.item=c.id),CPRChat.RenderRollCard(o)}#d(e,t,a){t.items.get(a).toChat(e)}async#g(e,t){if("endTurn"===t)game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}}}));let p=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{p=class SystemManager extends t.api.SystemManager{getActionHandler(){return new m}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(e){let t;return t=new u,t}async registerDefaults(){return d}registerSettings(e){register(e)}registerStyles(){return{template:{class:"tah-style-template-style",file:"tah-template-style",moduleId:e.ID,name:"Template Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.5",SystemManager:p},Hooks.call("tokenActionHudSystemReady",t)}));export{l as ACTION_TYPE,o as ACTOR_TYPES,m as ActionHandler,t as CORE_MODULE,d as DEFAULTS,i as GROUP,r as ITEM_TYPES,e as MODULE,a as REQUIRED_CORE_MODULE_VERSION,n as ROLL_TYPES,u as RollHandler,s as SYSTEM_ITEM_TYPE,p as SystemManager,c as Utils,register};
