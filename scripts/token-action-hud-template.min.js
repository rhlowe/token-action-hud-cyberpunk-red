const e={ID:"token-action-hud-cyberpunk-red"},t={ID:"token-action-hud-core"},n="1.5",i={skill:"tokenActionHud.template.skill"},o={character:{id:"character",name:"tokenActionHud.template.character",type:"system"},stat:{id:"stat",name:"tokenActionHud.template.stat",type:"system"},skill:{id:"skills",name:"tokenActionHud.template.skill",type:"system"},role:{id:"role",name:"tokenActionHud.template.role",type:"system"},gear:{id:"gear",name:"tokenActionHud.template.gear",type:"system"},cyber:{id:"cyber",name:"tokenActionHud.template.cyber",type:"system"},effects:{id:"effects",name:"tokenActionHud.template.effects",type:"system"}},s={activeEffects:{groupId:"activeEffects"},ammo:{groupId:"ammo"},armor:{groupId:"armor"},clothing:{groupId:"clothing"},criticalInjury:{groupId:"criticalInjury"},cyberdeck:{groupId:"cyberdeck"},cyberware:{groupId:"cyberware"},drug:{groupId:"drug"},gear:{groupId:"gear"},upgrade:{groupId:"upgrade"},netArchitecture:{groupId:"netArchitecture"},program:{groupId:"program"},role:{groupId:"role"},skill:{groupId:"skill"},vehicle:{groupId:"vehicle"},weapon:{groupId:"weapon"}},a=["blackIce","character","demon","mook"];let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class Utils{static getSetting(n,i=null){let o=i??null;try{o=game.settings.get(e.ID,n)}catch{t.api.Logger.debug(`Setting '${n}' not found`)}return o}static async setSetting(n,i){try{i=await game.settings.set(e.ID,n,i),t.api.Logger.debug(`Setting '${n}' set to '${i}'`)}catch{t.api.Logger.debug(`Setting '${n}' not found`)}}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{c=class ActionHandler extends e.api.ActionHandler{async buildSystemActions(t){if(this.actors=this.actor?[this.actor]:this.#e(),this.tokens=this.token?[this.token]:this.#t(),this.actorType=this.actor?.type,this.displayUnequipped=r.getSetting("displayUnequipped"),this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}console.debug("*** buildSystemActions",{groupIds:t,displayUnequipped:this.displayUnequipped,items:this.items}),a.includes(this.actorType)?this.#n():this.actor||this.#i()}#n(){this.#o()}#i(){}async#o(){if(0===this.items.size)return;const t="item",n=new Map;for(const[e,t]of this.items){const i=t.type;if(t.equipped||this.displayUnequipped){const o=n.get(i)??new Map;o.set(e,t),n.set(i,o)}}for(const[o,a]of n){const n=s[o]?.groupId;if(console.debug("*** #buildInventory groupId",n),!n)continue;const r={id:n,type:"system"};console.debug("*** #buildInventory groupData",r);const c=[...a].map((([n,o])=>{const s=n,a=o.name,r=e.api.Utils.i18n(i[t]),c=`${r?`${r}: `:""}${a}`,l=[t,s].join(this.delimiter);return{id:s,name:a,listName:c,encodedValue:l}}));console.debug("*** #buildInventory actions",c),this.addActions(c,r)}console.debug("*** #buildInventory",n)}async#e(){const e=canvas.tokens.controlled.filter((e=>e.actor)).map((e=>e.actor));return e.every((e=>a.includes(e.type)))?e:[]}async#t(){const e=canvas.tokens.controlled;return e.filter((e=>e.actor)).map((e=>e.actor)).every((e=>a.includes(e.type)))?e:[]}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=o;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const n=Object.values(t);l={layout:[{nestId:"character",id:"character",name:e.api.Utils.i18n("tokenActionHud.character"),groups:[{...t.character,nestId:"character_character"}]},{nestId:"stat",id:"stat",name:e.api.Utils.i18n("tokenActionHud.stat"),groups:[{...t.stat,nestId:"stat_stat"}]},{nestId:"skill",id:"skill",name:e.api.Utils.i18n("tokenActionHud.skill"),groups:[{...t.skill,nestId:"skill_skill"}]},{nestId:"role",id:"roley",name:e.api.Utils.i18n("tokenActionHud.role"),groups:[{...t.role,nestId:"role_role"}]},{nestId:"gear",id:"geary",name:e.api.Utils.i18n("tokenActionHud.gear"),groups:[{...t.gear,nestId:"gear_gear"}]},{nestId:"cyber",id:"cyber",name:e.api.Utils.i18n("tokenActionHud.cyber"),groups:[{...t.cyber,nestId:"cyber_cyber"}]},{nestId:"effects",id:"effects",name:e.api.Utils.i18n("tokenActionHud.effects"),groups:[{...t.effects,nestId:"effects_effects"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.utility"),groups:[{...t.utility,nestId:"utility_utility"}]}],groups:n}}));let d=null;function register(t){game.settings.register(e.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{d=class RollHandler extends e.api.RollHandler{async handleActionClick(e,t){const[n,i]=t.split("|");if(["item"].includes(n)&&this.isRenderItem())return this.doRenderItem(this.actor,i);const o=["character"];if(this.actor)return void await this.#s(e,this.actor,this.token,n,i);const s=canvas.tokens.controlled.filter((e=>o.includes(e.actor?.type)));for(const t of s){const o=t.actor;await this.#s(e,o,t,n,i)}}async handleActionHover(e,t){}async handleGroupClick(e,t){}async#s(e,t,n,i,o){switch(i){case"item":this.#a(e,t,o);break;case"utility":this.#r(n,o);break;default:console.debug("*** handleAction",{event:e,actor:t,token:n,actionTypeId:i,actionId:o})}}#a(e,t,n){t.items.get(n).toChat(e)}async#r(e,t){if("endTurn"===t)game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}}}));let u=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{u=class SystemManager extends t.api.SystemManager{getActionHandler(){return new c}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(e){let t;return t=new d,t}async registerDefaults(){return l}registerSettings(e){register(e)}registerStyles(){return{template:{class:"tah-style-template-style",file:"tah-template-style",moduleId:e.ID,name:"Template Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.5",SystemManager:u},Hooks.call("tokenActionHudSystemReady",t)}));export{i as ACTION_TYPE,a as ACTOR_TYPES,c as ActionHandler,t as CORE_MODULE,l as DEFAULTS,o as GROUP,s as ITEM_TYPE,e as MODULE,n as REQUIRED_CORE_MODULE_VERSION,d as RollHandler,u as SystemManager,r as Utils,register};
//# sourceMappingURL=token-action-hud-template.min.js.map
