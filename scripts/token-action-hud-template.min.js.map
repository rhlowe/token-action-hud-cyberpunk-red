{"version":3,"file":"token-action-hud-template.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","settings.js","roll-handler.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n  ID: 'token-action-hud-cyberpunk-red',\n};\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n  ID: 'token-action-hud-core',\n};\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '1.5';\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n  item: 'tokenActionHud.template.item',\n  utility: 'tokenActionHud.utility',\n};\n\n/**\n * Groups\n */\nexport const GROUP = {\n  // character: { id: 'character', name: 'tokenActionHud.template.character', type: 'system' ...collapsedByDefaul, },\n  character: { id: 'character', name: 'tokenActionHud.template.character', type: 'system' },\n  stats: { id: 'stats', name: 'tokenActionHud.template.stats', type: 'system' },\n  skills: { id: 'skills', name: 'tokenActionHud.template.skills', type: 'system' },\n  role: { id: 'role', name: 'tokenActionHud.template.role', type: 'system' },\n  gear: { id: 'gear', name: 'tokenActionHud.template.gear', type: 'system' },\n  cyber: { id: 'cyber', name: 'tokenActionHud.template.cyber', type: 'system' },\n  effects: { id: 'effects', name: 'tokenActionHud.template.effects', type: 'system' },\n};\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n  activeEffects: { groupId: 'activeEffects'},\n  ammo: { groupId: 'ammo'},\n  armor: { groupId: 'armor'},\n  clothing: { groupId: 'clothing'},\n  criticalInjuries: { groupId: 'criticalInjuries'},\n  cyberdecks: { groupId: 'cyberdecks'},\n  cyberware: { groupId: 'cyberware'},\n  drugs: { groupId: 'drugs'},\n  gear: { groupId: 'gear'},\n  upgrades: { groupId: 'upgrades'},\n  netArchitecture: { groupId: 'netArchitecture'},\n  programs: { groupId: 'programs'},\n  roles: { groupId: 'roles'},\n  skills: { groupId: 'skills'},\n  vehicles: { groupId: 'vehicles'},\n  weapons: { groupId: 'weapons'},\n};\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE } from './constants.js';\nimport { Utils } from './utils.js';\n\nexport let ActionHandler = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n   */\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    /**\n     * Build system actions\n     * Called by Token Action HUD Core\n     * @override\n     * @param {array} groupIds\n     */ a;\n    async buildSystemActions(groupIds) {\n      // Set actor and token variables\n      this.actors = !this.actor ? this._getActors() : [this.actor];\n      this.actorType = this.actor?.type;\n\n      // Settings\n      this.displayUnequipped = Utils.getSetting('displayUnequipped');\n\n      // Set items variable\n      if (this.actor) {\n        let items = this.actor.items;\n        items = coreModule.api.Utils.sortItemsByName(items);\n        this.items = items;\n      }\n\n      if (this.actorType === 'character') {\n        this.#buildCharacterActions();\n      } else if (!this.actor) {\n        this.#buildMultipleTokenActions();\n      }\n    }\n\n    /**\n     * Build character actions\n     * @private\n     */\n    #buildCharacterActions() {\n      this.#buildInventory();\n    }\n\n    /**\n     * Build multiple token actions\n     * @private\n     * @returns {object}\n     */\n    #buildMultipleTokenActions() {}\n\n    /**\n     * Build inventory\n     * @private\n     */\n    async #buildInventory() {\n      if (this.items.size === 0) return;\n\n      const actionTypeId = 'item';\n      const inventoryMap = new Map();\n\n      for (const [itemId, itemData] of this.items) {\n        const type = itemData.type;\n        const equipped = itemData.equipped;\n\n        if (equipped || this.displayUnequipped) {\n          const typeMap = inventoryMap.get(type) ?? new Map();\n          typeMap.set(itemId, itemData);\n          inventoryMap.set(type, typeMap);\n        }\n      }\n\n      for (const [type, typeMap] of inventoryMap) {\n        const groupId = ITEM_TYPE[type]?.groupId;\n\n        if (!groupId) continue;\n\n        const groupData = { id: groupId, type: 'system' };\n\n        // Get actions\n        const actions = [...typeMap].map(([itemId, itemData]) => {\n          const id = itemId;\n          const name = itemData.name;\n          const actionTypeName = coreModule.api.Utils.i18n(\n            ACTION_TYPE[actionTypeId]\n          );\n          const listName = `${\n            actionTypeName ? `${actionTypeName}: ` : ''\n          }${name}`;\n          const encodedValue = [actionTypeId, id].join(this.delimiter);\n\n          return {\n            id,\n            name,\n            listName,\n            encodedValue,\n          };\n        });\n\n        // TAH Core method to add actions to the action list\n        this.addActions(actions, groupData);\n      }\n    }\n  };\n});\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'character',\n                id: 'character',\n                name: coreModule.api.Utils.i18n('tokenActionHud.character'),\n                groups: [\n                    { ...groups.character, nestId: 'character_character' }\n                ]\n            },\n            {\n                nestId: 'stats',\n                id: 'stats',\n                name: coreModule.api.Utils.i18n('tokenActionHud.stats'),\n                groups: [\n                    { ...groups.stats, nestId: 'stats_stats' }\n                ]\n            },\n            {\n                nestId: 'skills',\n                id: 'skills',\n                name: coreModule.api.Utils.i18n('tokenActionHud.skills'),\n                groups: [\n                    { ...groups.skills, nestId: 'skills_skills' }\n                ]\n            },\n            {\n                nestId: 'role',\n                id: 'roley',\n                name: coreModule.api.Utils.i18n('tokenActionHud.role'),\n                groups: [\n                    { ...groups.role, nestId: 'role_role' }\n                ]\n            },\n            {\n                nestId: 'gear',\n                id: 'geary',\n                name: coreModule.api.Utils.i18n('tokenActionHud.gear'),\n                groups: [\n                    { ...groups.gear, nestId: 'gear_gear' }\n                ]\n            },\n            {\n                nestId: 'cyber',\n                id: 'cyber',\n                name: coreModule.api.Utils.i18n('tokenActionHud.cyber'),\n                groups: [\n                    { ...groups.cyber, nestId: 'cyber_cyber' }\n                ]\n            },\n            {\n                nestId: 'effects',\n                id: 'effects',\n                name: coreModule.api.Utils.i18n('tokenActionHud.effects'),\n                groups: [\n                    { ...groups.effects, nestId: 'effects_effects' }\n                ]\n            },\n        ],\n        groups: groupsArray\n    }\n})\n","import { MODULE } from './constants.js';\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register(coreUpdate) {\n  game.settings.register(MODULE.ID, 'displayUnequipped', {\n    name: game.i18n.localize(\n      'tokenActionHud.template.settings.displayUnequipped.name'\n    ),\n    hint: game.i18n.localize(\n      'tokenActionHud.template.settings.displayUnequipped.hint'\n    ),\n    scope: 'client',\n    config: true,\n    type: Boolean,\n    default: true,\n    onChange: (value) => {\n      coreUpdate(value);\n    },\n  });\n}\n","export let RollHandler = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n   */\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * Called by Token Action HUD Core when an action is left or right-clicked\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionClick(event, encodedValue) {\n      const [actionTypeId, actionId] = encodedValue.split('|');\n\n      const renderable = ['item'];\n\n      if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n        return this.doRenderItem(this.actor, actionId);\n      }\n\n      const knownCharacters = ['character'];\n\n      // If single actor is selected\n      if (this.actor) {\n        await this.#handleAction(\n          event,\n          this.actor,\n          this.token,\n          actionTypeId,\n          actionId\n        );\n        return;\n      }\n\n      const controlledTokens = canvas.tokens.controlled.filter((token) =>\n        knownCharacters.includes(token.actor?.type)\n      );\n\n      // If multiple actors are selected\n      for (const token of controlledTokens) {\n        const actor = token.actor;\n        await this.#handleAction(event, actor, token, actionTypeId, actionId);\n      }\n    }\n\n    /**\n     * Handle action hover\n     * Called by Token Action HUD Core when an action is hovered on or off\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionHover(event, encodedValue) {}\n\n    /**\n     * Handle group click\n     * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n     * @override\n     * @param {object} event The event\n     * @param {object} group The group\n     */\n    async handleGroupClick(event, group) {}\n\n    /**\n     * Handle action\n     * @private\n     * @param {object} event        The event\n     * @param {object} actor        The actor\n     * @param {object} token        The token\n     * @param {string} actionTypeId The action type id\n     * @param {string} actionId     The actionId\n     */\n    async #handleAction(event, actor, token, actionTypeId, actionId) {\n      switch (actionTypeId) {\n        case 'item':\n          this.#handleItemAction(event, actor, actionId);\n          break;\n        case 'utility':\n          this.#handleUtilityAction(token, actionId);\n          break;\n      }\n    }\n\n    /**\n     * Handle item action\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    #handleItemAction(event, actor, actionId) {\n      const item = actor.items.get(actionId);\n      item.toChat(event);\n    }\n\n    /**\n     * Handle utility action\n     * @private\n     * @param {object} token    The token\n     * @param {string} actionId The action id\n     */\n    async #handleUtilityAction(token, actionId) {\n      switch (actionId) {\n        case 'endTurn':\n          if (game.combat?.current?.tokenId === token.id) {\n            await game.combat?.nextTurn();\n          }\n          break;\n      }\n    }\n  };\n});\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js';\nimport { RollHandler as Core } from './roll-handler.js';\nimport { MODULE } from './constants.js';\nimport { DEFAULTS } from './defaults.js';\nimport * as systemSettings from './settings.js';\n\nexport let SystemManager = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's SystemManager class\n   */\n  SystemManager = class SystemManager extends coreModule.api.SystemManager {\n    /**\n     * Returns an instance of the ActionHandler to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {class} The ActionHandler instance\n     */\n    getActionHandler() {\n      return new ActionHandler();\n    }\n\n    /**\n     * Returns a list of roll handlers to Token Action HUD Core\n     * Used to populate the Roll Handler module setting choices\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {object} The available roll handlers\n     */\n    getAvailableRollHandlers() {\n      const coreTitle = 'Core Template';\n      const choices = { core: coreTitle };\n      return choices;\n    }\n\n    /**\n     * Returns an instance of the RollHandler to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @param {string} rollHandlerId The roll handler ID\n     * @returns {class}              The RollHandler instance\n     */\n    getRollHandler(rollHandlerId) {\n      let rollHandler;\n      switch (rollHandlerId) {\n        case 'core':\n        default:\n          rollHandler = new Core();\n          break;\n      }\n      return rollHandler;\n    }\n\n    /**\n     * Returns the default layout and groups to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @returns {object} The default layout and groups\n     */\n    async registerDefaults() {\n      return DEFAULTS;\n    }\n\n    /**\n     * Register Token Action HUD system module settings\n     * Called by Token Action HUD Core\n     * @override\n     * @param {function} coreUpdate The Token Action HUD Core update function\n     */\n    registerSettings(coreUpdate) {\n      systemSettings.register(coreUpdate);\n    }\n\n    /**\n     * Returns styles to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {object} The TAH system styles\n     */\n    registerStyles() {\n      return {\n        template: {\n          class: 'tah-style-template-style', // The class to add to first DIV element\n          file: 'tah-template-style', // The file without the css extension\n          moduleId: MODULE.ID, // The module ID\n          name: 'Template Style', // The name to display in the Token Action HUD Core 'Style' module setting\n        },\n      };\n    }\n  };\n});\n","import { SystemManager } from './system-manager.js';\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js';\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n  /**\n   * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n   */\n  const module = game.modules.get(MODULE.ID);\n  module.api = {\n    requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n    SystemManager,\n  };\n  Hooks.call('tokenActionHudSystemReady', module);\n});\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","item","utility","GROUP","character","id","name","type","stats","skills","role","gear","cyber","effects","ITEM_TYPE","activeEffects","groupId","ammo","armor","clothing","criticalInjuries","cyberdecks","cyberware","drugs","upgrades","netArchitecture","programs","roles","vehicles","weapons","Utils","Hooks","once","async","coreModule","static","key","defaultValue","value","game","settings","get","api","Logger","debug","set","ActionHandler","a","groupIds","this","actors","actor","_getActors","actorType","displayUnequipped","getSetting","items","sortItemsByName","buildCharacterActions","buildMultipleTokenActions","buildInventory","size","actionTypeId","inventoryMap","Map","itemId","itemData","equipped","typeMap","groupData","actions","map","actionTypeName","i18n","listName","encodedValue","join","delimiter","addActions","DEFAULTS","register","coreUpdate","localize","hint","scope","config","Boolean","default","onChange","groups","Object","values","forEach","group","groupsArray","layout","nestId","RollHandler","event","actionId","split","includes","isRenderItem","doRenderItem","knownCharacters","handleAction","token","controlledTokens","canvas","tokens","controlled","filter","handleItemAction","handleUtilityAction","toChat","combat","current","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","systemSettings.register","registerStyles","template","class","file","moduleId","on","module","modules","requiredCoreModuleVersion","call"],"mappings":"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"}