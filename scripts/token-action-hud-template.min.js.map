{"version":3,"file":"token-action-hud-template.min.js","sources":["constants.js","defaults.js","settings.js","utils.js","action-handler.js","roll-handler.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n  ID: 'token-action-hud-cyberpunk-red',\n};\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n  ID: 'token-action-hud-core',\n};\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '1.5';\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n  item: 'tokenActionHud.template.item',\n  utility: 'tokenActionHud.utility',\n};\n\n/**\n * Groups\n */\nexport const GROUP = {\n  // character: { id: 'character', name: 'tokenActionHud.template.character', type: 'system' ...collapsedByDefaul, },\n  character: { id: 'character', name: 'tokenActionHud.template.character', type: 'system' },\n  stats: { id: 'stats', name: 'tokenActionHud.template.stats', type: 'system' },\n  skills: { id: 'skills', name: 'tokenActionHud.template.skills', type: 'system' },\n  role: { id: 'role', name: 'tokenActionHud.template.role', type: 'system' },\n  gear: { id: 'gear', name: 'tokenActionHud.template.gear', type: 'system' },\n  cyber: { id: 'cyber', name: 'tokenActionHud.template.cyber', type: 'system' },\n  effects: { id: 'effects', name: 'tokenActionHud.template.effects', type: 'system' },\n};\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n  activeEffects: { groupId: 'activeEffects'},\n  ammo: { groupId: 'ammo'},\n  armor: { groupId: 'armor'},\n  clothing: { groupId: 'clothing'},\n  criticalInjuries: { groupId: 'criticalInjuries'},\n  cyberdecks: { groupId: 'cyberdecks'},\n  cyberware: { groupId: 'cyberware'},\n  drugs: { groupId: 'drugs'},\n  gear: { groupId: 'gear'},\n  upgrades: { groupId: 'upgrades'},\n  netArchitecture: { groupId: 'netArchitecture'},\n  programs: { groupId: 'programs'},\n  roles: { groupId: 'roles'},\n  skills: { groupId: 'skills'},\n  vehicles: { groupId: 'vehicles'},\n  weapons: { groupId: 'weapons'},\n};\n\n/**\n * RED Core Actor types\n */\nexport const ACTOR_TYPES = [\n  'blackIce',\n  'character',\n  'demon',\n  'mook',\n];","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'character',\n                id: 'character',\n                name: coreModule.api.Utils.i18n('tokenActionHud.character'),\n                groups: [\n                    { ...groups.character, nestId: 'character_character' }\n                ]\n            },\n            {\n                nestId: 'stats',\n                id: 'stats',\n                name: coreModule.api.Utils.i18n('tokenActionHud.stats'),\n                groups: [\n                    { ...groups.stats, nestId: 'stats_stats' }\n                ]\n            },\n            {\n                nestId: 'skills',\n                id: 'skills',\n                name: coreModule.api.Utils.i18n('tokenActionHud.skills'),\n                groups: [\n                    { ...groups.skills, nestId: 'skills_skills' }\n                ]\n            },\n            {\n                nestId: 'role',\n                id: 'roley',\n                name: coreModule.api.Utils.i18n('tokenActionHud.role'),\n                groups: [\n                    { ...groups.role, nestId: 'role_role' }\n                ]\n            },\n            {\n                nestId: 'gear',\n                id: 'geary',\n                name: coreModule.api.Utils.i18n('tokenActionHud.gear'),\n                groups: [\n                    { ...groups.gear, nestId: 'gear_gear' }\n                ]\n            },\n            {\n                nestId: 'cyber',\n                id: 'cyber',\n                name: coreModule.api.Utils.i18n('tokenActionHud.cyber'),\n                groups: [\n                    { ...groups.cyber, nestId: 'cyber_cyber' }\n                ]\n            },\n            {\n                nestId: 'effects',\n                id: 'effects',\n                name: coreModule.api.Utils.i18n('tokenActionHud.effects'),\n                groups: [\n                    { ...groups.effects, nestId: 'effects_effects' }\n                ]\n            },\n        ],\n        groups: groupsArray\n    }\n})\n","import { MODULE } from './constants.js';\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register(coreUpdate) {\n  game.settings.register(MODULE.ID, 'displayUnequipped', {\n    name: game.i18n.localize(\n      'tokenActionHud.template.settings.displayUnequipped.name'\n    ),\n    hint: game.i18n.localize(\n      'tokenActionHud.template.settings.displayUnequipped.hint'\n    ),\n    scope: 'client',\n    config: true,\n    type: Boolean,\n    default: true,\n    onChange: (value) => {\n      coreUpdate(value);\n    },\n  });\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTION_TYPE, ACTOR_TYPES, ITEM_TYPE } from './constants.js';\nimport { Utils } from './utils.js';\n\nexport let ActionHandler = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n   */\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    /**\n     * Build system actions\n     * Called by Token Action HUD Core\n     * @override\n     * @param {array} groupIds\n     */\n    async buildSystemActions(groupIds) {\n      // Set actor and token variables\n      this.actors = !this.actor ? this.#getActors() : [this.actor];\n      this.tokens = !this.token ? this.#getTokens() : [this.token];\n      this.actorType = this.actor?.type;\n      console.debug('*** buildSystemActions', groupIds);\n\n      // Settings\n      this.displayUnequipped = Utils.getSetting('displayUnequipped');\n\n      // Set items variable\n      if (this.actor) {\n        let items = this.actor.items;\n        items = coreModule.api.Utils.sortItemsByName(items);\n        this.items = items;\n      }\n\n      if (ACTOR_TYPES.includes(this.actorType)) {\n        this.#buildCharacterActions();\n      } else if (!this.actor) {\n        this.#buildMultipleTokenActions();\n      }\n    }\n\n    /**\n     * Build character actions\n     * @private\n     */\n    #buildCharacterActions() {\n      this.#buildInventory();\n    }\n\n    /**\n     * Build multiple token actions\n     * @private\n     * @returns {object}\n     */\n    #buildMultipleTokenActions() {}\n\n    /**\n     * Build inventory\n     * @private\n     */\n    async #buildInventory() {\n      console.debug('*** #buildInventory', this.items);\n      if (this.items.size === 0) return;\n\n      const actionTypeId = 'item';\n      const inventoryMap = new Map();\n\n      for (const [itemId, itemData] of this.items) {\n        const type = itemData.type;\n        const equipped = itemData.equipped;\n\n        if (equipped || this.displayUnequipped) {\n          const typeMap = inventoryMap.get(type) ?? new Map();\n          typeMap.set(itemId, itemData);\n          inventoryMap.set(type, typeMap);\n        }\n      }\n\n      for (const [type, typeMap] of inventoryMap) {\n        const groupId = ITEM_TYPE[type]?.groupId;\n\n        if (!groupId) continue;\n\n        const groupData = { id: groupId, type: 'system' };\n\n        // Get actions\n        const actions = [...typeMap].map(([itemId, itemData]) => {\n          const id = itemId;\n          const name = itemData.name;\n          const actionTypeName = coreModule.api.Utils.i18n(\n            ACTION_TYPE[actionTypeId]\n          );\n          const listName = `${\n            actionTypeName ? `${actionTypeName}: ` : ''\n          }${name}`;\n          const encodedValue = [actionTypeId, id].join(this.delimiter);\n\n          return {\n            id,\n            name,\n            listName,\n            encodedValue,\n          };\n        });\n\n        // TAH Core method to add actions to the action list\n        this.addActions(actions, groupData);\n      }\n    }\n\n    /**\n     * Get actors\n     * @private\n     * @returns {object}\n     */\n    async #getActors() {\n      const actors = canvas.tokens.controlled\n        .filter((token) => token.actor)\n        .map((token) => token.actor);\n      if (actors.every((actor) => ACTOR_TYPES.includes(actor.type))) {\n        return actors;\n      } else {\n        return [];\n      }\n    }\n\n    /**\n     * Get tokens\n     * @private\n     * @returns {object}\n     */\n    async #getTokens() {\n      const tokens = canvas.tokens.controlled;\n      const actors = tokens\n        .filter((token) => token.actor)\n        .map((token) => token.actor);\n      if (actors.every((actor) => ACTOR_TYPES.includes(actor.type))) {\n        return tokens;\n      } else {\n        return [];\n      }\n    }\n  };\n});\n","export let RollHandler = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n   */\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * Called by Token Action HUD Core when an action is left or right-clicked\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionClick(event, encodedValue) {\n      const [actionTypeId, actionId] = encodedValue.split('|');\n\n      const renderable = ['item'];\n\n      if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n        return this.doRenderItem(this.actor, actionId);\n      }\n\n      const knownCharacters = ['character'];\n\n      // If single actor is selected\n      if (this.actor) {\n        await this.#handleAction(\n          event,\n          this.actor,\n          this.token,\n          actionTypeId,\n          actionId\n        );\n        return;\n      }\n\n      const controlledTokens = canvas.tokens.controlled.filter((token) =>\n        knownCharacters.includes(token.actor?.type)\n      );\n\n      // If multiple actors are selected\n      for (const token of controlledTokens) {\n        const actor = token.actor;\n        await this.#handleAction(event, actor, token, actionTypeId, actionId);\n      }\n    }\n\n    /**\n     * Handle action hover\n     * Called by Token Action HUD Core when an action is hovered on or off\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionHover(event, encodedValue) {}\n\n    /**\n     * Handle group click\n     * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n     * @override\n     * @param {object} event The event\n     * @param {object} group The group\n     */\n    async handleGroupClick(event, group) {}\n\n    /**\n     * Handle action\n     * @private\n     * @param {object} event        The event\n     * @param {object} actor        The actor\n     * @param {object} token        The token\n     * @param {string} actionTypeId The action type id\n     * @param {string} actionId     The actionId\n     */\n    async #handleAction(event, actor, token, actionTypeId, actionId) {\n      switch (actionTypeId) {\n        case 'item':\n          this.#handleItemAction(event, actor, actionId);\n          break;\n        case 'utility':\n          this.#handleUtilityAction(token, actionId);\n          break;\n      }\n    }\n\n    /**\n     * Handle item action\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    #handleItemAction(event, actor, actionId) {\n      const item = actor.items.get(actionId);\n      item.toChat(event);\n    }\n\n    /**\n     * Handle utility action\n     * @private\n     * @param {object} token    The token\n     * @param {string} actionId The action id\n     */\n    async #handleUtilityAction(token, actionId) {\n      switch (actionId) {\n        case 'endTurn':\n          if (game.combat?.current?.tokenId === token.id) {\n            await game.combat?.nextTurn();\n          }\n          break;\n      }\n    }\n  };\n});\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js';\nimport { RollHandler as Core } from './roll-handler.js';\nimport { MODULE } from './constants.js';\nimport { DEFAULTS } from './defaults.js';\nimport * as systemSettings from './settings.js';\n\nexport let SystemManager = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's SystemManager class\n   */\n  SystemManager = class SystemManager extends coreModule.api.SystemManager {\n    /**\n     * Returns an instance of the ActionHandler to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {class} The ActionHandler instance\n     */\n    getActionHandler() {\n      return new ActionHandler();\n    }\n\n    /**\n     * Returns a list of roll handlers to Token Action HUD Core\n     * Used to populate the Roll Handler module setting choices\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {object} The available roll handlers\n     */\n    getAvailableRollHandlers() {\n      const coreTitle = 'Core Template';\n      const choices = { core: coreTitle };\n      return choices;\n    }\n\n    /**\n     * Returns an instance of the RollHandler to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @param {string} rollHandlerId The roll handler ID\n     * @returns {class}              The RollHandler instance\n     */\n    getRollHandler(rollHandlerId) {\n      let rollHandler;\n      switch (rollHandlerId) {\n        case 'core':\n        default:\n          rollHandler = new Core();\n          break;\n      }\n      return rollHandler;\n    }\n\n    /**\n     * Returns the default layout and groups to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @returns {object} The default layout and groups\n     */\n    async registerDefaults() {\n      return DEFAULTS;\n    }\n\n    /**\n     * Register Token Action HUD system module settings\n     * Called by Token Action HUD Core\n     * @override\n     * @param {function} coreUpdate The Token Action HUD Core update function\n     */\n    registerSettings(coreUpdate) {\n      systemSettings.register(coreUpdate);\n    }\n\n    /**\n     * Returns styles to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {object} The TAH system styles\n     */\n    registerStyles() {\n      return {\n        template: {\n          class: 'tah-style-template-style', // The class to add to first DIV element\n          file: 'tah-template-style', // The file without the css extension\n          moduleId: MODULE.ID, // The module ID\n          name: 'Template Style', // The name to display in the Token Action HUD Core 'Style' module setting\n        },\n      };\n    }\n  };\n});\n","import { SystemManager } from './system-manager.js';\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js';\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n  /**\n   * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n   */\n  const module = game.modules.get(MODULE.ID);\n  module.api = {\n    requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n    SystemManager,\n  };\n  Hooks.call('tokenActionHudSystemReady', module);\n});\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","item","utility","GROUP","character","id","name","type","stats","skills","role","gear","cyber","effects","ITEM_TYPE","activeEffects","groupId","ammo","armor","clothing","criticalInjuries","cyberdecks","cyberware","drugs","upgrades","netArchitecture","programs","roles","vehicles","weapons","ACTOR_TYPES","DEFAULTS","register","coreUpdate","game","settings","i18n","localize","hint","scope","config","Boolean","default","onChange","value","Hooks","once","async","coreModule","groups","Object","values","forEach","group","api","Utils","listName","groupsArray","layout","nestId","static","key","defaultValue","get","Logger","debug","set","ActionHandler","groupIds","this","actors","actor","getActors","tokens","token","getTokens","actorType","console","displayUnequipped","getSetting","items","sortItemsByName","includes","buildCharacterActions","buildMultipleTokenActions","buildInventory","size","actionTypeId","inventoryMap","Map","itemId","itemData","equipped","typeMap","groupData","actions","map","actionTypeName","encodedValue","join","delimiter","addActions","canvas","controlled","filter","every","RollHandler","event","actionId","split","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","handleItemAction","handleUtilityAction","toChat","combat","current","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","systemSettings.register","registerStyles","template","class","file","moduleId","on","module","modules","requiredCoreModuleVersion","call"],"mappings":"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"}