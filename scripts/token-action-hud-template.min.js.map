{"version":3,"file":"token-action-hud-template.min.js","sources":["constants.js","utils.js","action-handler.js","roll-handler.js","defaults.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n  ID: 'token-action-hud-cyberpunk-red',\n};\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n  ID: 'token-action-hud-core',\n};\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '1.5';\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n  // item: 'tokenActionHud.template.item',\n  skill: 'tokenActionHud.template.skill',\n  // utility: 'tokenActionHud.utility',\n};\n\n/**\n * Groups\n */\nexport const GROUP = {\n  // character: { id: 'character', name: 'tokenActionHud.template.character', type: 'system' ...collapsedByDefaul, },\n  character: { id: 'character', name: 'tokenActionHud.template.character', type: 'system' },\n  stat: { id: 'stat', name: 'tokenActionHud.template.stat', type: 'system' },\n  skill: { id: 'skill', name: 'tokenActionHud.template.skill', type: 'system' },\n  role: { id: 'role', name: 'tokenActionHud.template.role', type: 'system' },\n  gear: { id: 'gear', name: 'tokenActionHud.template.gear', type: 'system' },\n  cyber: { id: 'cyber', name: 'tokenActionHud.template.cyber', type: 'system' },\n  effects: { id: 'effects', name: 'tokenActionHud.template.effects', type: 'system' },\n};\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n  activeEffects: { groupId: 'activeEffects'},\n  ammo: { groupId: 'ammo'},\n  armor: { groupId: 'armor'},\n  clothing: { groupId: 'clothing'},\n  criticalInjury: { groupId: 'criticalInjury'},\n  cyberdeck: { groupId: 'cyberdeck'},\n  cyberware: { groupId: 'cyberware'},\n  drug: { groupId: 'drug'},\n  gear: { groupId: 'gear'},\n  upgrade: { groupId: 'upgrade'},\n  netArchitecture: { groupId: 'netArchitecture'},\n  program: { groupId: 'program'},\n  role: { groupId: 'role'},\n  skill: { groupId: 'skill'},\n  vehicle: { groupId: 'vehicle'},\n  weapon: { groupId: 'weapon'},\n};\n\n/**\n * RED Core Actor types\n */\nexport const ACTOR_TYPES = [\n  'blackIce',\n  'character',\n  'demon',\n  'mook',\n];","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTION_TYPE, ACTOR_TYPES, ITEM_TYPE } from './constants.js';\nimport { Utils } from './utils.js';\n\nexport let ActionHandler = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n   */\n  ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    /**\n     * Build system actions\n     * Called by Token Action HUD Core\n     * @override\n     * @param {array} groupIds\n     */\n    async buildSystemActions(groupIds) {\n      // Set actor and token variables\n      this.actors = !this.actor ? this.#getActors() : [this.actor];\n      this.tokens = !this.token ? this.#getTokens() : [this.token];\n      this.actorType = this.actor?.type;\n\n      // Settings\n      this.displayUnequipped = Utils.getSetting('displayUnequipped');\n\n      // Set items variable\n      if (this.actor) {\n        let items = this.actor.items;\n        items = coreModule.api.Utils.sortItemsByName(items);\n        this.items = items;\n      }\n\n      console.debug('*** buildSystemActions', {\n        groupIds,\n        displayUnequipped: this.displayUnequipped,\n        items: this.items,\n      });\n\n      if (ACTOR_TYPES.includes(this.actorType)) {\n        this.#buildCharacterActions();\n      } else if (!this.actor) {\n        this.#buildMultipleTokenActions();\n      }\n    }\n\n    /**\n     * Build character actions\n     * @private\n     */\n    #buildCharacterActions() {\n      this.#buildInventory();\n    }\n\n    /**\n     * Build multiple token actions\n     * @private\n     * @returns {object}\n     */\n    #buildMultipleTokenActions() {}\n\n    /**\n     * Build inventory\n     * @private\n     */\n    async #buildInventory() {\n      if (this.items.size === 0) return;\n\n      const actionTypeId = 'item';\n      const inventoryMap = new Map();\n\n      for (const [itemId, itemData] of this.items) {\n        const type = itemData.type;\n        const equipped = itemData.equipped;\n\n        if (equipped || this.displayUnequipped) {\n          const typeMap = inventoryMap.get(type) ?? new Map();\n          typeMap.set(itemId, itemData);\n          inventoryMap.set(type, typeMap);\n        }\n      }\n\n      // console.debug('*** #buildInventory', inventoryMap);\n\n      for (const [type, typeMap] of inventoryMap) {\n        const groupId = ITEM_TYPE[type]?.groupId;\n        console.debug('*** #buildInventory groupId', groupId);\n\n        if (!groupId) continue;\n\n        const groupData = { id: groupId, type: 'system' };\n        console.debug('*** #buildInventory groupData', groupData);\n\n        // Get actions\n        const actions = [...typeMap].map(([itemId, itemData]) => {\n          const id = itemId;\n          const name = itemData.name;\n          const actionTypeName = coreModule.api.Utils.i18n(\n            ACTION_TYPE[actionTypeId]\n          );\n          const listName = `${\n            actionTypeName ? `${actionTypeName}: ` : ''\n          }${name}`;\n          const encodedValue = [actionTypeId, id].join(this.delimiter);\n\n          return {\n            id,\n            name,\n            listName,\n            encodedValue,\n          };\n        });\n        console.debug('*** #buildInventory actions', actions);\n\n        // TAH Core method to add actions to the action list\n        this.addActions(actions, groupData);\n      }\n\n      console.debug('*** #buildInventory', inventoryMap);\n    }\n\n    /**\n     * Get actors\n     * @private\n     * @returns {object}\n     */\n    async #getActors() {\n      const actors = canvas.tokens.controlled\n        .filter((token) => token.actor)\n        .map((token) => token.actor);\n      if (actors.every((actor) => ACTOR_TYPES.includes(actor.type))) {\n        return actors;\n      } else {\n        return [];\n      }\n    }\n\n    /**\n     * Get tokens\n     * @private\n     * @returns {object}\n     */\n    async #getTokens() {\n      const tokens = canvas.tokens.controlled;\n      const actors = tokens\n        .filter((token) => token.actor)\n        .map((token) => token.actor);\n      if (actors.every((actor) => ACTOR_TYPES.includes(actor.type))) {\n        return tokens;\n      } else {\n        return [];\n      }\n    }\n  };\n});\n","export let RollHandler = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n   */\n  RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * Called by Token Action HUD Core when an action is left or right-clicked\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionClick(event, encodedValue) {\n      const [actionTypeId, actionId] = encodedValue.split('|');\n\n      const renderable = ['item'];\n\n      if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n        return this.doRenderItem(this.actor, actionId);\n      }\n\n      const knownCharacters = ['character'];\n\n      // If single actor is selected\n      if (this.actor) {\n        await this.#handleAction(\n          event,\n          this.actor,\n          this.token,\n          actionTypeId,\n          actionId\n        );\n        return;\n      }\n\n      const controlledTokens = canvas.tokens.controlled.filter((token) =>\n        knownCharacters.includes(token.actor?.type)\n      );\n\n      // If multiple actors are selected\n      for (const token of controlledTokens) {\n        const actor = token.actor;\n        await this.#handleAction(event, actor, token, actionTypeId, actionId);\n      }\n    }\n\n    /**\n     * Handle action hover\n     * Called by Token Action HUD Core when an action is hovered on or off\n     * @override\n     * @param {object} event        The event\n     * @param {string} encodedValue The encoded value\n     */\n    async handleActionHover(event, encodedValue) {}\n\n    /**\n     * Handle group click\n     * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n     * @override\n     * @param {object} event The event\n     * @param {object} group The group\n     */\n    async handleGroupClick(event, group) {}\n\n    /**\n     * Handle action\n     * @private\n     * @param {object} event        The event\n     * @param {object} actor        The actor\n     * @param {object} token        The token\n     * @param {string} actionTypeId The action type id\n     * @param {string} actionId     The actionId\n     */\n    async #handleAction(event, actor, token, actionTypeId, actionId) {\n      switch (actionTypeId) {\n        case 'item':\n          this.#handleItemAction(event, actor, actionId);\n          break;\n        case 'utility':\n          this.#handleUtilityAction(token, actionId);\n          break;\n        default:\n          console.debug('*** handleAction', {event, actor, token, actionTypeId, actionId});\n      }\n    }\n\n    /**\n     * Handle item action\n     * @private\n     * @param {object} event    The event\n     * @param {object} actor    The actor\n     * @param {string} actionId The action id\n     */\n    #handleItemAction(event, actor, actionId) {\n      console.debug('*** handleItemAction', {event, actor, actionId})\n      const item = actor.items.get(actionId);\n      item.toChat(event);\n    }\n\n    /**\n     * Handle utility action\n     * @private\n     * @param {object} token    The token\n     * @param {string} actionId The action id\n     */\n    async #handleUtilityAction(token, actionId) {\n      switch (actionId) {\n        case 'endTurn':\n          if (game.combat?.current?.tokenId === token.id) {\n            await game.combat?.nextTurn();\n          }\n          break;\n      }\n    }\n  };\n});\n","import { GROUP } from './constants.js';\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  const groups = GROUP;\n  Object.values(groups).forEach((group) => {\n    group.name = coreModule.api.Utils.i18n(group.name);\n    group.listName = `Group: ${coreModule.api.Utils.i18n(\n      group.listName ?? group.name\n    )}`;\n  });\n  const groupsArray = Object.values(groups);\n  DEFAULTS = {\n    layout: [\n      {\n        nestId: 'character',\n        id: 'character',\n        name: coreModule.api.Utils.i18n('tokenActionHud.template.character'),\n        groups: [\n            { ...groups.character, nestId: 'character_character' },\n            { ...groups.role, nestId: 'character_role' }\n        ],\n      },\n      {\n        nestId: 'stat',\n        id: 'stat',\n        name: coreModule.api.Utils.i18n('tokenActionHud.template.stat'),\n        groups: [{ ...groups.stat, nestId: 'stat_stat' }],\n      },\n      {\n        nestId: 'skill',\n        id: 'skill',\n        name: coreModule.api.Utils.i18n('tokenActionHud.template.skill'),\n        groups: [{ ...groups.skill, nestId: 'skill_skill' }],\n      },\n    //   {\n    //     nestId: 'role',\n    //     id: 'role',\n    //     name: coreModule.api.Utils.i18n('tokenActionHud.template.role'),\n    //     groups: [{ ...groups.role, nestId: 'role_role' }],\n    //   },\n      {\n        nestId: 'gear',\n        id: 'gear',\n        name: coreModule.api.Utils.i18n('tokenActionHud.template.gear'),\n        groups: [{ ...groups.gear, nestId: 'gear_gear' }],\n      },\n      {\n        nestId: 'cyber',\n        id: 'cyber',\n        name: coreModule.api.Utils.i18n('tokenActionHud.template.cyber'),\n        groups: [{ ...groups.cyber, nestId: 'cyber_cyber' }],\n      },\n      {\n        nestId: 'effects',\n        id: 'effects',\n        name: coreModule.api.Utils.i18n('tokenActionHud.template.effects'),\n        groups: [{ ...groups.effects, nestId: 'effects_effects' }],\n      },\n      {\n        nestId: 'utility',\n        id: 'utility',\n        name: coreModule.api.Utils.i18n('tokenActionHud.template.utility'),\n        groups: [\n          { ...groups.utility, nestId: 'utility_utility' }\n        ]\n      },\n    ],\n    groups: groupsArray,\n  };\n});\n","import { MODULE } from './constants.js';\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register(coreUpdate) {\n  game.settings.register(MODULE.ID, 'displayUnequipped', {\n    name: game.i18n.localize(\n      'tokenActionHud.template.settings.displayUnequipped.name'\n    ),\n    hint: game.i18n.localize(\n      'tokenActionHud.template.settings.displayUnequipped.hint'\n    ),\n    scope: 'client',\n    config: true,\n    type: Boolean,\n    default: true,\n    onChange: (value) => {\n      coreUpdate(value);\n    },\n  });\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js';\nimport { RollHandler as Core } from './roll-handler.js';\nimport { MODULE } from './constants.js';\nimport { DEFAULTS } from './defaults.js';\nimport * as systemSettings from './settings.js';\n\nexport let SystemManager = null;\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n  /**\n   * Extends Token Action HUD Core's SystemManager class\n   */\n  SystemManager = class SystemManager extends coreModule.api.SystemManager {\n    /**\n     * Returns an instance of the ActionHandler to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {class} The ActionHandler instance\n     */\n    getActionHandler() {\n      return new ActionHandler();\n    }\n\n    /**\n     * Returns a list of roll handlers to Token Action HUD Core\n     * Used to populate the Roll Handler module setting choices\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {object} The available roll handlers\n     */\n    getAvailableRollHandlers() {\n      const coreTitle = 'Core Template';\n      const choices = { core: coreTitle };\n      return choices;\n    }\n\n    /**\n     * Returns an instance of the RollHandler to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @param {string} rollHandlerId The roll handler ID\n     * @returns {class}              The RollHandler instance\n     */\n    getRollHandler(rollHandlerId) {\n      let rollHandler;\n      switch (rollHandlerId) {\n        case 'core':\n        default:\n          rollHandler = new Core();\n          break;\n      }\n      return rollHandler;\n    }\n\n    /**\n     * Returns the default layout and groups to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @returns {object} The default layout and groups\n     */\n    async registerDefaults() {\n      return DEFAULTS;\n    }\n\n    /**\n     * Register Token Action HUD system module settings\n     * Called by Token Action HUD Core\n     * @override\n     * @param {function} coreUpdate The Token Action HUD Core update function\n     */\n    registerSettings(coreUpdate) {\n      systemSettings.register(coreUpdate);\n    }\n\n    /**\n     * Returns styles to Token Action HUD Core\n     * Called by Token Action HUD Core\n     * @override\n     * @returns {object} The TAH system styles\n     */\n    registerStyles() {\n      return {\n        template: {\n          class: 'tah-style-template-style', // The class to add to first DIV element\n          file: 'tah-template-style', // The file without the css extension\n          moduleId: MODULE.ID, // The module ID\n          name: 'Template Style', // The name to display in the Token Action HUD Core 'Style' module setting\n        },\n      };\n    }\n  };\n});\n","import { SystemManager } from './system-manager.js';\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js';\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n  /**\n   * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n   */\n  const module = game.modules.get(MODULE.ID);\n  module.api = {\n    requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n    SystemManager,\n  };\n  Hooks.call('tokenActionHudSystemReady', module);\n});\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","skill","GROUP","character","id","name","type","stat","role","gear","cyber","effects","ITEM_TYPE","activeEffects","groupId","ammo","armor","clothing","criticalInjury","cyberdeck","cyberware","drug","upgrade","netArchitecture","program","vehicle","weapon","ACTOR_TYPES","Utils","Hooks","once","async","coreModule","static","key","defaultValue","value","game","settings","get","api","Logger","debug","set","ActionHandler","groupIds","this","actors","actor","getActors","tokens","token","getTokens","actorType","displayUnequipped","getSetting","items","sortItemsByName","console","includes","buildCharacterActions","buildMultipleTokenActions","buildInventory","size","actionTypeId","inventoryMap","Map","itemId","itemData","equipped","typeMap","groupData","actions","map","actionTypeName","i18n","listName","encodedValue","join","delimiter","addActions","canvas","controlled","filter","every","RollHandler","event","actionId","split","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","group","handleItemAction","handleUtilityAction","toChat","combat","current","tokenId","nextTurn","DEFAULTS","register","coreUpdate","localize","hint","scope","config","Boolean","default","onChange","groups","Object","values","forEach","groupsArray","layout","nestId","utility","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","systemSettings.register","registerStyles","template","class","file","moduleId","on","module","modules","requiredCoreModuleVersion","call"],"mappings":"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"}